Row,Instruction,Query,Distance
128,Write XQL query to Firewall URL Log and display log for IP address 192.168.1.10,"dataset = panw_ngfw_url_raw | filter source_ip = ""192.168.1.10""  | fields uri, referer | sort desc _time",0.9736982025497375
212,Write XQL query to Firewall URL Logs to display log entry of 192.168.1.1 and sort in descending order or time,"dataset = panw_ngfw_url_raw | filter source_ip = ""192.168.1.1""  | fields uri, referer | sort desc _time",0.9404568430315354
2,Write XQL query to Firewall Logs and return 7 results,dataset = panw_ngfw_traffic_raw | limit 7,0.8757659716883057
170,Write XQL query to Firewall threat logs to display top 10 Apps With Threats By and sort by count ,"dataset = panw_ngfw_threat_raw | comp count(_id) as count by app , severity | fields app, severity, count | limit 10 | sort desc count",0.8716610962001001
4,Write XQL query to Firewall Logs and expand array of array_values field and return 3 results,dataset=panw_ngfw_traffic_raw | arrayexpand array_values limit 3,0.8677390969389106
119,Write XQL query to Firewall Threat logs to display chart of all Firewall actions,"dataset = panw_ngfw_threat_raw | comp count(_id) as Count by action | view graph type = pie header = ""Threat Actions"" xaxis = action yaxis = Count",0.86642366416785
15,Write XQL query to Firewall Logs for NGFW Unique DNS Queries Sinkholed by Host IP,"dataset = panw_ngfw_threat_raw | filter `action` = \""sinkhole\"" and `app` = \""dns\"" | join (preset = network_story ) as XAN XAN.action_remote_ip = dest_ip and XAN.action_local_ip = source_ip and XAN.action_remote_port = dest_port and XAN.action_local_port = source_port | filter dns_query_name not contains \""wpad.\"" | comp count_distinct(dns_query_name) as host_query_count by action_local_ip | sort desc host_query_count | limit 100",0.8555643453085071
171,Write XQL query to Firewall threat logs to get Top 20 Virus and Malware Events and sort by count,"dataset = panw_ngfw_threat_raw | filter sub_type = ""virus"" or sub_type contains ""virus"" | comp count(_id ) as count by file_name , sub_type , users , source_ip , dest_ip, action | fields file_name , sub_type , users , source_ip , dest_ip, action, count | limit 20 | sort desc count",0.855273868668381
166,Write XQL query to highlight Remote Access Activity from Firewall threat log,"dataset = panw_ngfw_traffic_raw | filter app_sub_category = ""remote-access"" | comp count(_id) as Total by app, from_zone, to_zone, source_ip , dest_ip, dest_port | sort desc Total",0.8528735600064195
217,Write XQL query to Firewall File data and highlight File Activity for low risk application,"dataset = panw_ngfw_filedata_raw | filter (risk_of_app != ""Low"") | comp count(_id) as total by risk_of_app , users, app, file_name, file_type | fields risk_of_app, app, file_name , file_type, users, total | sort desc Total",0.8455083509282663
193,Wirite XQL query to Firewall logs to find remote access connections via port 3389,"dataset = panw_ngfw_traffic_raw | filter dest_port = 3389 | fields from_zone , to_zone, source_ip , dest_ip , dest_port",0.8407580575740575
125,"Write XQL query to Firewall threat logs and display events relating to a combination of firewall and endpoint logs over the network, limit the result to 100 and sort by host query count","dataset = panw_ngfw_threat_raw | filter `action` = ""sinkhole"" and `app` = ""dns"" | join (preset = network_story ) as XAN XAN.action_remote_ip = dest_ip and XAN.action_local_ip = source_ip and XAN.action_remote_port = dest_port and XAN.action_local_port = source_port | filter dns_query_name not contains ""wpad."" | comp count_distinct(dns_query_name) as host_query_count by action_local_ip | sort desc host_query_count | limit 100",0.8388454279575461
220,Write XQL query to Firewall File data and provide insight into file types seen and display in pie graph,"dataset = panw_ngfw_filedata_raw | comp count(_id) as total by file_type | fields total, file_type | sort desc total | view graph type = pie xaxis = file_type yaxis = total",0.8384387797820985
11,"Write XQL query to Firewall Logs to get all rule with action is allow and display rule_matched, action, from_zone, to_zone, total_traffic, sorted by count number of _id","dataset = panw_ngfw_traffic_raw | filter action = \""allow\"" | comp count(_id) as total_traffic by rule_matched,action, from_zone, to_zone | fields rule_matched, action, from_zone, to_zone, total_traffic | sort desc total_traffic",0.8378213374402798
17,Write XQL query to get a list of endpoints which have exactly 1 proxy configured,dataset=endpoints | alter num_proxy = array_length(proxy) | filter num_proxy  = 1,0.8328416700364563
219,Write XQL query to Firewall File data and highlight the direction of files in pie chart,dataset = panw_ngfw_filedata_raw | comp count(_id) as Total by direction_of_attack | view graph type = pie xaxis = direction_of_attack yaxis = Total,0.8313246105037632
173,Write XQL query to Firewall threat logs and network story to display NGFW Unique DNS Queries Sinkholed by Host IP and return top 100 results. ,"dataset = panw_ngfw_threat_raw | filter `action` = ""sinkhole"" and `app` = ""dns"" | join (preset = network_story ) as XAN XAN.action_remote_ip = dest_ip and XAN.action_local_ip = source_ip and XAN.action_remote_port = dest_port and XAN.action_local_port = source_port | filter dns_query_name not contains ""wpad."" | comp count_distinct(dns_query_name) as host_query_count by action_local_ip | sort desc host_query_count | limit 100",0.8308224116136544
169,Write XQL query to highlight threats over time derived from Firewall threat log and display in line graph,"dataset = panw_ngfw_threat_raw | bin _time span = 1d | comp count(_id) by _time | alter date = format_timestamp(""%b %d %Y"", _time) | sort asc _time | view graph type = line header = ""Threats Over Time"" xaxis = date yaxis = count_1 headerfontsize = 16 legend = `false` xaxistitle = ""Time"" yaxistitle = ""Count""",0.8303379403659654
199,Write XQL query to Firewall threat logs to Show HTTP code 400s and display as column graph,"dataset = panw_ngfw_threat_raw | filter threat_name_firewall contains ""HTTP-Code-FW 4"" | comp count(_id) as Counter by threat_name_firewall | sort desc Counter | view graph type = column subtype = grouped layout = horizontal header = ""HTTP Code 400s"" xaxis = threat_name_firewall yaxis = Counter",0.8289168831203815
18,Write XQL query to get a list of endpoints which are not protected,dataset=endpoints | filter operational_status != ENUM.PROTECTED,0.8286440177029739
19,Write XQL query to get the number of endpoints assigned to each policy,dataset=endpoints | comp count(endpoint_name) as num_endpoint by assigned_prevention_policy ,0.8280041331594717
14,Write XQL query to look for hostname and IP connecting via port 3389 using an unusual process,"dataset = xdr_data | filter event_type = NETWORK and event_sub_type = NETWORK_STREAM_CONNECT and action_remote_port = 3389 and actor_process_image_name not in (\""mstsc.exe\"", \""Microsoft Remote Desktop\"") | fields event_type, agent_hostname as Hostname, action_local_ip as Local_IP, action_remote_ip as Remote_IP, action_external_hostname as Remote_Host, action_local_port as Local_Port, actor_process_image_name as Process_Getting_Connection",0.8275536962642929
218,"Write XQL query to Firewall File data and provide insight into file activity based upon volume by app, display in pie chart","dataset = panw_ngfw_filedata_raw | filter app not contains ""xdr"" and app not contains ""paloalto"" and app not contains ""traps"" and app not contains ""traps"" and app not contains ""panos"" | comp count(_id) as total by app | fields total, app | sort desc total | view graph type = pie xaxis = app yaxis = total",0.8253975634374218
167,Write XQL query to display pie graph highlighting the threat categories derived from Firewall threat logs,"dataset = panw_ngfw_threat_raw | comp count(_id) as count by threat_category | view graph type = pie header = ""NGFW Threat Categories"" show_callouts_names = `true` xaxis = threat_category yaxis = count headerfontsize = 16",0.8233297299471947
221,Write XQL query to Firewal URL logs and show visibility into malware categorized destinations in desc order or total connection,"dataset = panw_ngfw_url_raw | filter url_category = ""malware"" | comp count(_id) as total by url_domain, from_zone, to_zone, source_ip | fields url_domain, source_ip, from_zone, to_zone, total | sort desc total",0.8227838065878854
114,"Write XQL query to AWS logs and parses out Username, Source IP, User Agent, and the Event Category","dataset = amazon_aws_raw | alter Username=json_extract(message, ""$.userIdentity.sessionContext.sessionIssuer.userName"") | alter SourceIP=json_extract(message, ""$.sourceIPAddress"") | alter UserAgent=json_extract(message, ""$.userAgent"") | alter Category=json_extract(message, ""$.eventCategory"")",0.8204491617533918
168,Write XQL query to highlight outbound geo-graphical threats from Firewall threat log and display in map graph,"dataset = panw_ngfw_threat_raw  | iploc dest_ip loc_continent AS Continent, loc_country AS IP_Address_Country, loc_region AS IP_Address_Region, loc_city as IP_Address_City | comp count(_id ) as remotelocations by IP_Address_Country | view graph type = map header = ""NGFW Threats by Country"" xaxis = IP_Address_Country yaxis = remotelocations legend = `false`",0.8200284113712628
178,Write XQL query looks for network traffic on common ports where a higher layer protocol does not match the port that is being used,"dataset = panw_ngfw_traffic_raw | filter (app = ""http"" AND dest_port NOT IN (80, 8080)) OR (app = ""dns"" AND dest_port != 53) OR (app = ""ssl"" AND dest_port NOT IN (443, 8443)) OR (app = ""smtp"" AND dest_port != 25) | fields app, from_zone , to_zone, source_ip , dest_ip , dest_port",0.8187984993385736
230,Write XQL query to highlight IoT Devices by Profile derived from IoT Security Device logs,"dataset = panw_iot_security_devices_raw | comp count_distinct(MAC) as Devices, count_distinct(profile) as Profiles, count_distinct(category) as Categories by profile_vertical | filter profile_vertical != null | fields profile_vertical, Devices , Profiles , Categories",0.8164842641565005
209,"Write XQL Query to Data lake to detects external IP addresses that failed to login multiple time , among with succesful logins","dataset = xdr_data | filter event_type = EVENT_LOG AND action_evtlog_event_id = 4624  | alter Source_IP = arrayindex(regextract(action_evtlog_message, ""Source Network Address:.*?(\d+\.\d+\.\d+\.\d+)\r\n""),0), User_Name = arrayindex(regextract(action_evtlog_message,""New Logon:\r\n.*\r\n.*?Account Name:.*?(\w.*?)\r\n""),0) | fields User_Name, Source_IP, agent_hostname as logged_in_to_host | filter (User_Name != ""SYSTEM"" AND User_Name NOT CONTAINS ""$"") AND Source_IP != ""0.0.0.0"" | comp count(User_Name ) as total_successful_logins by Source_IP, User_Name ,logged_in_to_host | fields total_successful_logins , Source_IP , User_Name ,logged_in_to_host |alter internal1 = incidr(Source_IP , ""172.16.0.0/12"")  |alter internal2 = incidr(Source_IP, ""10.0.0.0/8"") |alter internal3 = incidr(Source_IP, ""192.168.0.0/16"") |filter internal1 = false AND internal2 = false AND internal3 = false AND source_ip != ""127.0.0.1"" | fields -internal1 | fields -internal2 | fields -internal3 | join type = left ( filter event_type = EVENT_LOG AND (action_evtlog_event_id = 4625)  | alter Failed_Source_IP = arrayindex(regextract(action_evtlog_message, ""Source Network Address:.*?(\d+\.\d+\.\d+\.\d+)\r\n""),0) | comp count(Failed_Source_IP) as total_failed_logins by agent_hostname ,Failed_Source_IP ) as failed_logins failed_logins.Failed_Source_IP = Source_IP and failed_logins.agent_hostname = logged_in_to_host | filter total_failed_logins > total_successful_logins AND total_failed_logins > 20  | fields -Failed_Source_IP | fields -agent_hostname | alter ratio_between_fails_to_success = divide(total_failed_logins , total_successful_logins )",0.8159520417625299
165,Write XQL query to Firewall threat log and display the map graph of the geographic location malicious emails originated from through wildfire detections,"dataset = panw_ngfw_threat_raw | filter app_sub_category =√íemail√ì and recipient_of_virus != null | iploc source_ip loc_country as IP_Address_Country, loc_region as IP_Address_Region, loc_city as IP_Address_City | comp count(_id ) as remotelocations by IP_Address_Country | view graph type = map header = √íEmail Threats by Country√ì xaxis = IP_Address_Country yaxis = remotelocations legend = `false`",0.814868064134449
115,"Write XQL query to Firewall Logs and looks for hosts that reach out to more than 100 hosts, or more than 100 ports in a short period of time, indicating scanning.","dataset = panw_ngfw_traffic_raw | comp count_distinct(dest_port ) as num_dest_port, count_distinct(dest_ip) as num_dest_ip by source_ip | filter num_dest_port > 100 OR num_dest_ip > 100",0.8141134135799915
155,Write XQL query to Cloud logs to find Log4Shell in Cloud Environments by regex,"dataset = cloud_audit_logs | alter raw_log_decoded = replace(replace(replace(lowercase(raw_log), ""%7b"", ""{""), ""%24"",""$""), ""%7d"", ""}"") | filter raw_log_decoded ~= ""(\${|\$[^{]+{)(j|\${j[^}]+}|\${[^}]+j})(n|\${n[^}]+}|\${[^}]+n})(d|\${d[^}]+}|\${[^}]+d})(i|\${i[^}]+}|\${[^}]+i})"" OR raw_log ~= ""${jndi""",0.8109215357735812
179,Write XQL query to search for potential credit card information exfiltrated via DNS,"dataset = xdr_data| filter event_type = STORY and dns_query_name ~= ""^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|3[47][0-9]{13}).*"" |filter agent_hostname != ""DC1"" |comp count(dns_query_name) as cc_count by dns_query_name, user_id, agent_hostname |fields dns_query_name, cc_count, user_id, agent_hostname, agent_hostname as nullhost |replacenull nullhost = ""N/A"" |filter nullhost != ""N/A"" |fields dns_query_name, cc_count, user_id, nullhost",0.8090028880542349
228,Write XQL query to highlight failed logins by users derived from NGFW Global Protect logs,"dataset = panw_ngfw_globalprotect_raw | filter status = ""failure"" | comp count(_id) as Count by source_user | fields source_user, Count",0.8084392763915069
148,Write XQL query to look for changes to file associated with login credentials/privileges,"dataset = xdr_data | filter agent_os_type = AGENT_OS_LINUX | filter event_sub_type = FILE_CHANGE_MODE or event_sub_type = FILE_CHANGE_OWNER or event_sub_type = FILE_WRITE or event_sub_type = FILE_REMOVE or event_sub_type = FILE_RENAME  | filter action_file_path =""/etc/passwd"" or action_file_path=""/etc/shadow"" or action_file_path=""/etc/sudeors"" | fields _time as Time, agent_hostname as AgentHostname, action_file_path as FilePath",0.8042707971445013
16,Write XQL query to look for changes to file associated with login credentials/privileges,"dataset = xdr_data | filter agent_os_type = AGENT_OS_LINUX | filter event_sub_type = FILE_CHANGE_MODE or event_sub_type = FILE_CHANGE_OWNER or event_sub_type = FILE_WRITE or event_sub_type = FILE_REMOVE or event_sub_type = FILE_RENAME | filter action_file_path =\""/etc/passwd\"" or action_file_path=\""/etc/shadow\"" or action_file_path=\""/etc/sudeors\"" | fields _time as Time, agent_hostname as AgentHostname, action_file_path as FilePath",0.8042707971445013
12,Write XQL query to look for changes to file associated with login credentials/privileges,"dataset = xdr_data | filter agent_os_type = AGENT_OS_LINUX | filter event_sub_type = FILE_CHANGE_MODE or event_sub_type = FILE_CHANGE_OWNER or event_sub_type = FILE_WRITE or event_sub_type = FILE_REMOVE or event_sub_type = FILE_RENAME | filter action_file_path =\""/etc/passwd\"" or action_file_path=\""/etc/shadow\"" or action_file_path=\""/etc/sudeors\"" | fields _time as Time, agent_hostname as AgentHostname, action_file_path as FilePath",0.8042707971445013
224,Write XQL query to highlight users connected to GP derived from NGFW Global Protect logs,"dataset = panw_ngfw_globalprotect_raw | filter stage = ""connected"" | comp count(_id) as Count by source_user | fields source_user, Count ",0.8009945245128705
8,"Write XQL query to Firewall Logs and return the count of _id for all records that have matching values of total_traffic by rule_matched,action, from_zone, to_zone where action is allow. Display these fields rule_matched, action, from_zone, to_zone, total_traffic and sort by total_traffic in desc.","dataset = panw_ngfw_traffic_raw\n| filter action = \""allow\""\n| comp count(_id) as total_traffic by rule_matched,action, from_zone, to_zone\n| fields rule_matched, action, from_zone, to_zone, total_traffic\n| sort desc total_traffic",0.8003172938359587
194,Write XQL Query to network story and search for Regsvr32 process making network connections,"preset = network_story  | filter actor_process_image_name = ""regsvr32.exe""  | alter app_id = arraystring(action_app_id_transitions,"","")  | fields actor_process_image_name as process_name, actor_process_command_line as process_cmd, agent_hostname as agent_name, action_local_ip as source_ip, action_local_port as source_port, action_remote_ip as remote_ip, action_remote_port as remote_port,app_id, action_total_upload as upload, action_total_download as download  | filter lowercase(action_process_image_name) = ""rundll32.exe"" AND lowercase(action_process_image_command_line) ~= "".*script.*?mshtml.dll\,runhtmlapplication.*""  | fields action_process_image_command_line as cmd, actor_process_image_path as parent_path, actor_process_command_line as parent_cmd, causality_actor_process_image_path as cgo, causality_actor_process_command_line as cgo_cmd  |filter event_type = FILE AND event_sub_type IN (FILE_CREATE_NEW, FILE_WRITE)  |filter agent_os_sub_type CONTAINS ""server""  |filter action_file_path ~= ""c:\\programdata\\[a-zA-Z0-9]+\.(rar|zip|zipx|7z)"" OR action_file_path ~= ""(c:\\root\\[a-zA-Z0-9]+\.dmp$|c:\\windows\\temp\\[a-zA-Z0-9]+\.dmp$)""  | filter event_type = NETWORK and event_sub_type = NETWORK_STREAM_ACCEPT and (action_local_port = 139 or action_local_port = 445)  | fields event_type, agent_hostname as Hostname, action_local_ip as Local_IP, action_remote_ip as Remote_IP, action_external_hostname as Remote_Host, action_local_port as Local_Port, actor_process_image_name as Process_Getting_Connection  | filter action_file_name contains ""password"" and (action_file_name contains "".doc"" or action_file_name contains "".xls"" or action_file_name contains "".txt"" or action_file_name contains "".csv"") and action_file_name not contains ""~$"" and action_file_name not contains "".lnk"" and action_file_name not contains "":Zone.Identifier"" and actor_effective_username not contains ""system"" and actor_process_image_name not contains ""chrome.exe"" and actor_process_image_name not contains ""cmd.exe"" and actor_process_image_name not contains ""java.exe"" and actor_process_image_name not contains ""searchprotocolhost.exe"" and action_file_path not contains ""appdata"" and (action_file_path contains ""desktop"" or action_file_path contains ""documents"" or action_file_path contains ""user"") |fields action_file_name as FileName, action_file_path as File_Path, actor_effective_username as User, agent_hostname as Hostname, actor_process_image_name as Acting_Process | dedup FileName , Hostname | sort asc User, asc Hostname",0.7991115615856352
233,Write XQL query to highlight IoT Security Alerts derived from IoT Security Alert logs and sort total count in desc order,"dataset = panw_iot_security_alerts_raw | comp count(_id) as Total by name, description, severity, hostname | fields name , description, severity , hostname , Total | sort desc Total",0.7991080872579124
13,Write XQL query to look for Linux files written to the /tmp directory,"dataset = xdr_data | filter agent_os_type = AGENT_OS_LINUX and event_type = FILE and event_sub_type = FILE_WRITE | filter action_file_path ~= \""^/tmp/\"" | fields agent_hostname as Host, action_file_path as FilePath, os_actor_process_command_line as CausalityCommand",0.7971079128666065
146,Write XQL query to find Linux files written to the /tmp directory,"dataset = xdr_data | filter agent_os_type = AGENT_OS_LINUX and event_type = FILE and event_sub_type = FILE_WRITE | filter action_file_path ~= ""^/tmp/"" | fields agent_hostname as Host, action_file_path as FilePath, os_actor_process_command_line as CausalityCommand",0.7966769333848149
127,Write XQL query to Endpoint dataset and find potential duplicate endpoints,"dataset = endpoints | fields endpoint_name, endpoint_status, operating_system, ip_address, last_seen | filter endpoint_name = $endpoint_name",0.7963821328248804
145,Write XQL query to look for changes to file associated with login credentials/privileges on Linux,"dataset = xdr_data | filter agent_os_type = AGENT_OS_LINUX | filter event_sub_type = FILE_CHANGE_MODE or event_sub_type = FILE_CHANGE_OWNER or event_sub_type = FILE_WRITE or event_sub_type = FILE_REMOVE or event_sub_type = FILE_RENAME  | filter action_file_path =""/etc/passwd"" or action_file_path=""/etc/shadow"" or action_file_path=""/etc/sudeors"" | fields _time as Time, agent_hostname as AgentHostname, action_file_path as FilePath",0.7957380839694517
229,Write XQL query to highlight user locations based upon their source_ip derived from NGFW Global Protect logs and display in map chart,"dataset = panw_ngfw_globalprotect_raw | filter stage = ""connected"" | iploc public_ip loc_continent AS Continent, loc_country AS IP_Address_Country, loc_region AS IP_Address_Region, loc_city as IP_Address_City | comp count(_id) as remotelocations by IP_Address_Country | view graph type = map xaxis = IP_Address_Country yaxis = remotelocations legend = `false`",0.794967343172549
180,Write XQL query to search for potential Social Security Numbers exfiltrated via DNS,"dataset = xdr_data| filter event_type = STORY and dns_query_name ~= ""^(\d{3}-?\d{2}-?\d{4}|XXX-XX-XXXX)$.*"" |filter agent_hostname != ""DC1"" |comp count(dns_query_name) as cc_count by dns_query_name, user_id, agent_hostname |fields dns_query_name, cc_count, user_id, agent_hostname, agent_hostname as nullhost |replacenull nullhost = ""N/A"" |filter nullhost != ""N/A"" |fields dns_query_name, cc_count, user_id, nullhost",0.7949231374308977
234,Write XQL query to IOT Security Alert Logs and highlight alert severity and display in pie chart,"dataset = panw_iot_security_alerts_raw | comp count(_id) as Total by severity | view graph type = pie xaxis = severity yaxis = Total valuecolor(""high"",""#fe3600"") valuecolor(""medium"",""#ffad45"")",0.7934857646042126
192,Write XQL query to search for Rare SSL certificates and limit the result to 15,"dataset = xdr_data | fields ssl_req_chello_sni_sample, event_id | comp count(event_id) as Count by ssl_req_chello_sni_sample | sort asc Count | limit 15",0.7906297252647496
226,Write XQL query to highlight GP events by source_ip derived from NGFW Global Protect logs and display in pie graph,"dataset = panw_ngfw_globalprotect_raw | comp count(_id) as Count by public_ip | fields public_ip as src_ip, Count | view graph type = pie xaxis = src_ip yaxis = Count",0.7895650862245227
152,Write XQL query to list files being written to a portable storage device,"dataset = xdr_data  |filter event_type=FILE and event_sub_type = FILE_CREATE_NEW  | alter Drive_Type = json_extract(to_json_string(action_file_device_info),""$.storage_device_drive_type""), Filesystem = json_extract_scalar(to_json_string(action_file_device_info),""$.storage_device_filesystem""), Drive_Letter = json_extract_scalar(to_json_string(action_file_device_info),""$.storage_device_mount_point""), Device_Serial_Number = json_extract_scalar(to_json_string(action_file_device_info),""$.storage_device_serial_number"")  | filter drive_type = ""2""  | fields action_file_name as FileName, action_file_path as File_Path, actor_effective_username as Username, Filesystem, Drive_Letter, Device_Serial_Number  | filter event_sub_type = NETWORK_HTTP_HEADER  | filter agent_hostname contains ""PUT.IP.ADDRESS.HERE"" | alter my_uri = json_extract_scalar(action_network_http, ""$.uri""), host = json_extract_scalar(lowercase(action_network_http), ""$.headers.host"") | alter URL = concat(host, my_uri)  | filter (URL contains ""battle.net"" or URL contains ""akamai"" or URL contains ""wargaming"" or URL contains ""netflix"" or URL contains ""hulu"" or URL contains ""hbo.com"" or URL contains ""youtube.com"" or URL contains ""instagram"" or URL contains ""facebook"" or URL contains ""amazon.com"" or URL contains ""reddit"") and (URL not contains "".png"")  | fields agent_hostname, URL, actor_process_image_name, actor_process_command_line, http_referer | sort desc _time",0.7880946038077478
238,"Write XQL query to Data lake to identify Failed logins on linux, looks for failed passwords and invalid uses","dataset = xdr_data | filter agent_os_type = AGENT_OS_LINUX | filter (action_evtlog_provider_name in (""/var/log/auth.log"", ""/var/log/secure"")) | filter action_evtlog_message contains ""Failed password"" | alter username = regextract(action_evtlog_message , ""Failed password for\s(.*?)from\s"") | alter dsthost = regextract(action_evtlog_message , ""from\s(.*?)\sport"") | fields username as User, dsthost as From, agent_ip_addresses as To , action_evtlog_message | sort desc _time",0.7873755296263689
231,Write XQL query to highlight C2 destinations derived from IoT Security Alert logs and display in map graph,"dataset = panw_iot_security_alerts_raw | alter AlertSource = json_extract(msg, ""$.toip"") | alter AlertSource2 = trim(AlertSource, ""\"""") | iploc AlertSource2 loc_continent AS Continent, loc_country AS IP_Address_Country, loc_region AS IP_Address_Region, loc_city as IP_Address_City | comp count(_id ) as remotelocations by IP_Address_Country | view graph type = map xaxis = IP_Address_Country yaxis = remotelocations legend = `false`",0.7864979949021609
210,Write XQL Query to search for Users running Sudo SU command,"dataset = xdr_data  | filter action_process_image_command_line ~= ""\s+su\b"" AND action_process_image_name = ""sudo""  | fields actor_effective_username as source_username, action_process_username as target_username, action_process_image_command_line as command_line  | filter event_sub_type = NETWORK_HTTP_HEADER and agent_ip_addresses contains ""192.168.1.10""  | alter my_uri = json_extract_scalar(action_network_http, ""$.uri""), host = json_extract_scalar(lowercase(action_network_http), ""$.headers.host"") | alter URL = concat(host, my_uri ) | fields agent_hostname, URL, actor_process_image_name, actor_process_command_line, http_referer | sort desc _time",0.785781547489911
181,Write XQL query to look for Powershell binary code delivery via base64,"preset = xdr_event_log  | filter lowercase(action_evtlog_description) CONTAINS ""scriptblock"" AND lowercase(action_evtlog_message) ~= "".*io.memorystream.*frombase64.*""  | fields agent_hostname as hostname, action_evtlog_message as script, actor_process_image_path as process_path, actor_process_command_line as process_cmd, causality_actor_process_image_path as cgo_path, causality_actor_process_command_line as cgo_cmd  | filter event_sub_type = PROCESS_START AND action_process_file_info != null AND action_process_signature_status != SIGNED  | alter internal_company_name = json_extract_scalar(action_process_file_info, ""$.company""), signature_status_string = to_string(action_process_signature_status)  | filter lowercase(internal_company_name) ~= "".*microsoft.*|.*adobe.*|.*vmware.*|.*apache.*|.*google.*|.*mozilla.*|.*zoom.*|.*oracle.*""  | alter signature_status = if(signature_status_string = ""3"", ""Unsigned"", signature_status_string = ""2"", ""Signed Invalid"", signature_status_string = ""4"", ""Failed To Obtain"", signature_status_string = ""5"", ""Weak Hash"", signature_status_string = ""6"", ""Unsupported"", signature_status_string = ""7"", ""Invalid CVE 2020_0601"", signature_status_string)  | fields internal_company_name, signature_status , action_process_image_path, action_process_image_sha256  |filter event_type = PROCESS AND event_sub_type = PROCESS_START AND action_process_image_name ~= "".*?\.(?:pdf|docx|pptx|bat|mp3|xlsx|avi|mp4|jpg)\.exe""  | fields action_process_image_path as Process_Path, action_process_image_command_line as Process_CMD, action_process_os_pid as Process_PID, actor_process_image_path as Parent_Process, actor_process_command_line as Parent_CMD  | filter event_type = NETWORK and event_sub_type = NETWORK_HTTP_HEADER | alter User_Agent = to_string(json_extract_scalar(action_network_http, ""$.headers.User-Agent"") ) | filter User_Agent != null | dedup User_Agent , actor_process_image_path by asc _time | comp count_distinct(User_Agent) as counter by actor_process_image_path | filter counter > 1 | join (dataset = xdr_data | filter event_type = NETWORK and event_sub_type = NETWORK_HTTP_HEADER | alter User_Agent=to_string(json_extract_scalar(action_network_http, ""$.headers.User-Agent"")) | filter User_Agent != null | dedup User_Agent , actor_process_image_path by asc _time) as UA actor_process_image_path = UA.actor_process_image_path | fields actor_process_image_path as Process_Path, User_Agent",0.7853268240172788
232,Write XQL query to highlight alert categories derived from IoT Security Alert logs and display in pie chart,"dataset = panw_iot_security_alerts_raw | alter AlertType = json_extract(msg, ""$.alertType"") | alter AlertType2 = trim(AlertType, ""\"""") | comp count(_ID) as Total by AlertType2 | view graph type = pie xaxis = AlertType2 yaxis = Total",0.7792033595884779
142,Write XQL query to Data Lake to detect SMB connections,"dataset = xdr_data  | filter event_type = NETWORK AND event_sub_type = NETWORK_STREAM_ACCEPT AND (action_local_port = 139 OR action_local_port = 445)  | fields event_type, agent_hostname as Hostname, action_local_ip as Local_IP, action_remote_ip as Remote_IP, action_external_hostname as Remote_Host, action_local_port as Local_Port, actor_process_image_name as Process_Getting_Connection  | filter event_type = NETWORK AND event_sub_type = ENUM.NETWORK_STREAM_CONNECT_FAILED AND (action_remote_port = 139 OR action_remote_port = 445) | fields event_type, agent_hostname as Hostname, action_local_ip as Local_IP, action_remote_ip as Remote_IP, action_external_hostname as Remote_Host, action_local_port as Local_Port, actor_process_image_name as Process_Getting_Connection | alter IP_Address_Private = if (incidr(Remote_IP, ""10.0.0.0/8"") = true, ""TRUE"", if (incidr(Remote_IP, ""127.0.0.0/8"") = true, ""TRUE"", if (incidr(Remote_IP, ""169.254.0.0/16"") = true, ""TRUE"", if (incidr(Remote_IP, ""172.16.0.0/12"") = true, ""TRUE"", if (incidr(Remote_IP, ""192.168.0.0/16"") = true, ""TRUE"", ""FALSE""))))) | filter IP_Address_Private = ""TRUE"" | comp count_distinct(Remote_IP ) as num_dest_ip by Local_IP | limit 100 | sort desc num_dest_ip",0.7778738817035367
206,"Write XQL Query to display Top 10 users creating files on a removable device, filter for more than 100 files and sort in desc order","dataset = xdr_data  | filter event_type = FILE AND event_sub_type = FILE_CREATE_NEW  | alter Drive_Type = json_extract(to_json_string(action_file_device_info),""$.storage_device_drive_type""), Filesystem = json_extract_scalar(to_json_string(action_file_device_info),""$.storage_device_filesystem""), Drive_Letter = json_extract_scalar(to_json_string(action_file_device_info),""$.storage_device_mount_point""), Device_Serial_Number = json_extract_scalar(to_json_string(action_file_device_info),""$.storage_device_serial_number"")  | filter drive_type = ""2""  | fields action_file_path as File_Path, actor_effective_username as Username, Filesystem, Drive_Letter, Device_Serial_Number  | comp count_distinct(File_Path) as Count_Of_Unique_Files by Username, Filesystem, Drive_Letter, Device_Serial_Number  | filter Count_Of_Unique_Files > 100  | sort desc Count_Of_Unique_Files  | filter event_type = STORY AND auth_identity_display_name != null AND auth_outcome != ""SUCCESS""  | fields auth_identity_display_name as user, auth_identity as email, auth_client as source  | comp count_distinct(source) as counter by user, email  | sort desc counter  | limit 10  | bin _time span = 1h | comp sum(bytes_total ) as TotalBytes by _time | alter TotalGB = divide(TotalBytes ,1048576) | sort asc _time | view graph type = line header = ""Total Traffic By 1Hr"" xaxis = _time yaxis = TotalGB xaxistitle = ""Time"" yaxistitle = ""Traffic Volume (GB)""",0.777611799823433
174,Write XQL query to Data Lake to get the number of interactive logon per day per endpoint for all users. ,"dataset = xdr_data | filter event_type = EVENT_LOG and action_evtlog_event_id = 4634 and action_evtlog_message contains ""Logon Type: 7"" | alter account_name = arrayindex( split( arrayindex( regextract(action_evtlog_message , ""Account Name:\t\t.*\r\n"") ,0), "":""),1) | alter day_only = date_floor(_time, ""d"") | fields agent_hostname , agent_ip_addresses , account_name, day_only | comp count(_time) as counter by account_name , day_only | sort asc day_only",0.7764633066161584
172,Write XQL query to Data Lake to list NGFW Risky File Sharing Apps with Risk score > 4,"dataset = xdr_data | filter event_type = STORY and action_category_of_app_id = ""general-internet"" and action_sub_category_of_app_id = ""file-sharing"" and action_app_id_risk > 4 and action_total_upload > 0 | fields _time, mac, action_username , action_local_ip,action_remote_ip, action_remote_port, action_category_of_app_id ,action_sub_category_of_app_id, action_app_id_risk, action_app_id_transitions, action_file_internal_zipped_files,action_total_upload",0.7759345597318195
130,Write XQL query to Endpoint dataset and display the endpoints that have been seen in 72 hours counting back from current time,"dataset = endpoints | alter last_seen_int = to_integer(timestamp_diff(current_time(),last_seen,""HOUR"")) | filter last_seen_int < 72",0.7747024550373635
150,Write XQL query to look for users who elevated to a super user or ran a command at elevated super user level,"dataset = xdr_data | filter agent_os_type = AGENT_OS_LINUX and event_type = PROCESS | filter actor_process_image_name = ""su"" or actor_process_image_name = ""sudo"" | fields _time as Time, agent_hostname as AgentHostname, agent_ip_addresses as IPAddress, actor_process_image_path as ImagePath, actor_process_command_line as CommandLine, actor_effective_username as Username",0.774616719935921
1,Write XQL query to Data Lake and return 5 results,dataset = xdr_data | limit 5,0.7744068701239305
123,Write XQL query to Data Lake and find the list of files being written to a portable storage device," |filter event_type=FILE and event_sub_type = FILE_CREATE_NEW  | alter Drive_Type = json_extract(to_json_string(action_file_device_info),""$.storage_device_drive_type""), Filesystem = json_extract_scalar(to_json_string(action_file_device_info),""$.storage_device_filesystem""), Drive_Letter = json_extract_scalar(to_json_string(action_file_device_info),""$.storage_device_mount_point""), Device_Serial_Number = json_extract_scalar(to_json_string(action_file_device_info),""$.storage_device_serial_number"")  | filter drive_type = ""2""  | fields action_file_name as FileName, action_file_path as File_Path, actor_effective_username as Username, Filesystem, Drive_Letter, Device_Serial_Number  | filter event_type = FILE and _product = ""XDR agent"" | fields agent_id, event_id | comp count_distinct(agent_id ) as CountOfAgentsSendingEDRData by _product | fields CountOfAgentsSendingEDRData | view graph type = gauge subtype = radial header = ""Endpoints Sending EDR Data"" yaxis = CountOfAgentsSendingEDRData maxscalerange = 100 scale_threshold(""#ff0000"",""#ffa012"",""5"",""#fffb00"",""10"",""#00ff00"",""50"") dataunit = ""Endpoints""",0.7740985329311241
7,"Write XQL query to Firewall Logs and return the count of vendor_name for all records that have matching values of source_ip, sender_of_virus, recipient_of_virus , subject_of_email , threat_name, file_name where app type is email and no virus, then sort the result by vendor name in desc.","dataset = panw_ngfw_threat_raw | filter app_sub_category =“email” and recipient_of_virus != null | comp count(vendor_name) as Total by source_ip, sender_of_virus, recipient_of_virus , subject_of_email , threat_name, file_name | sort desc Total",0.7734653361630257
149,Write XQL query to look for rare processes seen running on a Linux system and display as column chart,"dataset = xdr_data | filter agent_os_type = AGENT_OS_LINUX and event_type = PROCESS | comp count (event_id) as Counter by actor_process_image_name | sort asc Counter | view graph type = column subtype = grouped layout = horizontal header = ""Rare Seen Processes"" xaxis = actor_process_image_name yaxis = Counter",0.7733414840576369
86,Extract the first IPV4 address found in the first element of the agent_interface_map array.,"dataset = xdr_data 
| fields agent_interface_map as aim 
| alter ipv4 = json_extract_array(to_json_string(arrayindex(aim, 0)) , ""$.ipv4"") 
| filter aim != null 
| limit 10
",0.772822634690222
160,Write XQL query to look for process Mshta.exe making network connections,"preset = network_story  | filter actor_process_image_name = ""mshta.exe""  | fields actor_process_image_path as process_path, actor_process_command_line as process_cmd, action_local_ip as source_ip, action_local_port as source_port, action_remote_ip as remote_ip, action_remote_port as remote_port, action_total_upload as upload, action_total_download as download  | filter action_process_image_name = ""mshta.exe"" AND action_process_image_command_line CONTAINS "".hta""  | fields action_process_image_path as process_path, action_process_image_command_line as process_cmd, actor_process_image_name as parent_process, actor_process_command_line as parent_cmd  | dedup process_path, process_cmd, parent_process, parent_cmd by asc _time  | filter (action_process_image_command_line CONTAINS ""`"" OR action_process_image_command_line CONTAINS ""^"" OR action_process_image_command_line CONTAINS ""+"") AND agent_os_type = AGENT_OS_WINDOWS  | alter only_esc_caret = replex(action_process_image_command_line, ""[^\^]"",""""), only_esc_backtick = replex(action_process_image_command_line, ""[^\`]"",""""), only_esc_plus = replex(action_process_image_command_line, ""[^\+]"","""")  | alter count_of_esc_caret = len(only_esc_caret), count_of_esc_backtick = len(only_esc_backtick), count_of_esc_plus = len(only_esc_plus)  | filter count_of_esc_caret > 3 OR count_of_esc_backtick > 3 OR count_of_esc_plus > 3 | fields action_process_image_name as process_name, action_process_image_command_line as process_cmd, count_of_esc_caret, count_of_esc_backtick, count_of_esc_plus  | filter event_type = EVENT_LOG AND action_evtlog_event_id = 4625 AND agent_hostname != null  | alter User_Name = arrayindex(regextract(action_evtlog_message, ""Account For Which Logon Failed:\r\n.*\r\n.*Account Name:.*?(\w.*)\r\n""),0), Host_Name = arrayindex(regextract(action_evtlog_message, ""Workstation Name:.*?(\w.*)\r\n""),0)  | comp count_distinct(User_Name) as Counter by Host_Name  | filter Counter >= 5 AND Host_Name != null  | sort desc Counter  | filter app_sub_category =√íemail√ì and recipient_of_virus != null | comp count(vendor_name) as Total by source_ip, sender_of_virus, recipient_of_virus , subject_of_email , threat_name, file_name | sort desc Total",0.7725879925823945
175,Write XQL query to Data Lake to get event log ID 4634 and count time by account_name and day_only then sort by day_only,"dataset = xdr_data | filter event_type = EVENT_LOG and action_evtlog_event_id = 4634 and action_evtlog_message contains ""Logon Type: 7"" | alter account_name = arrayindex( split( arrayindex( regextract(action_evtlog_message , ""Account Name:\t\t.*\r\n"") ,0), "":""),1) | alter day_only = date_floor(_time, ""d"") | fields agent_hostname , agent_ip_addresses , account_name, day_only | comp count(_time) as counter by account_name , day_only | sort asc day_only",0.7714630022502755
227,Write XQL query to highlight GP events over time derived from NGFW Global Protect logs and display in area graph,"dataset = panw_ngfw_globalprotect_raw | filter (stage in (""""""login"""""", """"""logout"""""")) | bin _time span = 1d | comp count(_id) by _time | alter date = format_timestamp(""%b %d %Y"", _time) | sort desc date | view graph type = area subtype = standard show_percentage = `false` xaxis = date yaxis = count_1 legend = `false`",0.7713725778988637
70,Use the split function to split IP addresses into an array of octets. Return the 3rd octet contained in the IP address.,"dataset = xdr_data 
| fields action_local_ip  as alii 
| alter ip_third_octet = arrayindex(split(alii, "".""), 2) 
| filter alii != null and alii != ""0.0.0.0"" 
| limit 10 ",0.7709781398567088
57,Set the maximum number of records returned by the query to 10.,dataset = xdr_data | limit 10,0.7706782307181972
156,Wirte XQL query to Data lake and find Machines connecting via RDP using an unusual process,"dataset = xdr_data | filter event_type = NETWORK and event_sub_type = NETWORK_STREAM_CONNECT and action_remote_port = 3389 and actor_process_image_name not in (""mstsc.exe"", ""Microsoft Remote Desktop"")  | fields event_type, agent_hostname as Hostname, action_local_ip as Local_IP, action_remote_ip as Remote_IP, action_external_hostname as Remote_Host, action_local_port as Local_Port, actor_process_image_name as Process_Getting_Connection  | filter event_type = NETWORK AND event_sub_type = NETWORK_STREAM_ACCEPT AND action_local_port IN (5900,5999)  | fields event_type, agent_hostname as Hostname, action_local_ip as Local_IP, action_remote_ip as Remote_IP, action_external_hostname as Remote_Host, action_local_port as Local_Port, actor_process_image_name as Process_Getting_Connection  | filter action_file_device_type = 1 AND action_file_name != null  | filter action_file_name = ""583da945-62af-10e8-4902-a8f205c72b2e""  | fields agent_hostname, actor_process_instance_id, actor_process_image_name, action_file_name  | dedup actor_process_instance_id  | fields _time as Time,agent_id | comp max(Time) as MaxTime by agent_id | join (dataset = host_inventory | fields host_name, _time as LatestInventorySnapshot, manufacturer, agent_type, os_type, auto_runs, applications ) as hi hi.LatestInventorySnapshot = MaxTime | fields host_name, LatestInventorySnapshot, manufacturer, agent_type, os_type, auto_runs, applications",0.7680561062200637
225,Write XQL query to highlight GP connection event types derived from NGFW Global Protect logs and display in column chart,"dataset = panw_ngfw_globalprotect_raw | filter (stage in (""""""login"""""", """"""logout"""""")) | comp count(_id) as Count by event_id | fields event_id as Event, Count | sort desc Count | view graph type = column subtype = stacked layout = horizontal xaxis = Event yaxis = Count",0.767216503660743
98,"Split IP addresses into an array, each element of the array containing an IP octet.","dataset = xdr_data 
| fields action_local_ip  as alii 
| alter ip_octets = split(alii, ""."") 
| limit 10 ",0.7669032280729451
154,Write XQL query to Data Lake to find DNS queries where the domain name is over 100 characters in length,"dataset = xdr_data  | filter event_type = STORY and len(dns_query_name) > 100  | fields action_local_ip, dns_query_name, agent_hostname  | comp count_distinct(dns_query_name) as unique_long_dns by action_local_ip, agent_hostname  | sort desc unique_long_dns  | view graph type = column subtype = grouped,horizontal layout = horizontal header = ""Long DNS Queries"" xaxis = agent_hostname yaxis = unique_long_dns",0.7668371269043338
129,Write XQL query to Data Lake to detect if a new Chrome based browser extension was installed to your systems,"dataset = xdr_data | filter event_sub_type = FILE_CREATE_NEW and action_file_path contains ""User Data\Default\Extensions"" | alter ExtensionID = arrayindex(regextract(action_file_path,""\\Extensions\\(.*)\\[0-9]""),0) | alter FolderPath = arrayindex(regextract(action_file_path,""(.*)\\[0-9]""),0) | fields agent_hostname, _time, ExtensionID, FolderPath, agent_id",0.7613800732631629
106,"Display the first 10 IP addresses that begin with a value greater than 192. Use the split function to split the IP address by '.', and then use the arrayindex function to retrieve the first value in the resulting array. Convert this to a number and perform an arithmetic compare to arrive at a result set.","dataset = xdr_data 
| fields action_local_ip  as alii 
| filter to_number(arrayindex(split(alii, "".""),0))  > 192 
| limit 10 ",0.761295329405906
103,"Display the first 10 IP addresses that begin with a value greater than 192. Use the split function to split the IP address by '.', and then use the arrayindex function to retrieve the first value in the resulting array. Convert this to a number and perform an arithmetic compare to arrive at a result set.","dataset = xdr_data 
| fields action_local_ip  as alii 
| filter to_float(arrayindex(split(alii, "".""),0))  > 192 
| limit 10 ",0.761295329405906
104,"Display the first 10 IP addresses that begin with a value greater than 192. Use the split function to split the IP address by '.', and then use the arrayindex function to retrieve the first value in the resulting array. Convert this to a number and perform an arithmetic compare to arrive at a result set.","dataset = xdr_data 
| fields action_local_ip  as alii 
| filter to_integer(arrayindex(split(alii, "".""),0))  > 192 
| limit 10 ",0.761295329405906
223,Write XQL query to XDR Registry to look for identifying GUID/Hex to create custom Device Management with USB devices,"preset = xdr_registry | filter agent_hostname=""Hostname""  | filter lowercase(action_registry_full_key) ~= ""enum.*usb"" | filter action_registry_full_key contains ""0000""  | dedup agent_hostname, action_registry_value_name, action_registry_full_key, actor_process_image_name, actor_effective_username, agent_hostname, action_registry_return_val",0.7609636146978354
147,Write XQL query to hunt for process chains that behave similarly to 3Snake,"dataset = xdr_data | filter agent_os_type = AGENT_OS_LINUX | filter event_type = PROCESS and event_sub_type = PROCESS_START | fields actor_process_command_line, actor_process_image_path, actor_process_os_pid, action_process_image_command_line, causality_actor_process_image_path as Parent_Process_Path, agent_hostname,actor_process_image_sha256 as child_hash,causality_actor_process_image_sha256 as parent_hash  | comp count_distinct(action_process_image_command_line) as Counter by actor_process_os_pid, actor_process_command_line, Parent_Process_Path, actor_process_image_path, agent_hostname, child_hash, parent_hash  | filter actor_process_image_path = Parent_Process_Path | filter Counter >=10 and Counter <=500 | sort desc Counter | filter actor_process_image_path != ""*httpd*"" and actor_process_image_path != ""*dockerd*"" and actor_process_image_path != ""*splunk*"" and actor_process_image_path != ""*systemd*"" and actor_process_image_path != ""*kubelet*"" and actor_process_image_path !=""*perl*"" and actor_process_image_path !=""*sonar.sh*"" | filter (actor_process_image_path not contains ""kthreadd"") | filter (actor_process_image_path not contains ""/proc/self/exe"") | filter (actor_process_image_path not contains ""/opt/datadog-agent/bin/agent/agent"") | filter (actor_process_image_path not contains ""/var/cache/kubernetes-install/nodeup"") | filter (actor_process_image_path not contains ""/usr/local/bin/te-sandboxd"") | filter (actor_process_image_path not contains ""/usr/sbin/sshd"") | filter (actor_process_image_path not contains ""/etc/update-motd.d/50-motd-news"") | filter (actor_process_image_path not contains ""/usr/bin/docker-containerd"") | filter (actor_process_image_path not contains ""/opt/jfrog/xray/app/bin/xrayManage.sh"")",0.7595996855248642
112,Write XQL query to Data Lake to find all executions of JAR files by javaw.exe and display by action process,"dataset = xdr_data  | filter action_process_image_name = ""javaw.exe"" AND action_process_image_command_line CONTAINS "".jar""  | fields action_process_image_path as Process_Path, action_process_image_command_line as Process_CMD, actor_process_image_path as Parent_Path, actor_process_command_line as Parent_CMD  | dataset = xdr_data | filter event_type = FILE AND event_sub_type IN (FILE_WRITE, FILE_CREATE_NEW)  | filter action_file_extension = ""aspx""  | filter action_file_path ~= ""(\\inetpub\\wwwroot\\aspnet_client\\|\\frontend\\httpproxy\\owa\\auth\\|\\frontend\\httpproxy\\ ecp\\auth\\)""  | filter action_file_path != ""*\\frontend\\httpproxy\\ecp\\auth\\timeoutlogoff.aspx""  | filter actor_process_image_name IN (""UMWorkerProcess.exe"", ""w3wp.exe"", ""umservice.exe"")  | fields agent_hostname, actor_process_image_path, actor_process_image_command_line, action_file_path",0.7588509123454417
135,Write XQL query to hunt for the FRESHFIRE malware using √íC:\dell.sdr√ì file access,"dataset = xdr_data | filter action_file_path = ""c:\\dell.sdr"" | dedup agent_id, agent_hostname, action_file_name, action_file_path, action_file_sha256, action_file_size | fields agent_id, agent_hostname, action_file_name, action_file_path, action_file_sha256, action_file_size",0.7554534051753033
144,Write XQL Query to Data Lake to detect ISS process running discovery commands,"dataset = xdr_data  |filter lowercase(causality_actor_process_image_name) = ""w3wp.exe""  |filter lowercase(action_process_image_name) IN (""net.exe"", ""quser.exe"", ""certutil.exe"", ""arp.exe"", ""hostname.exe"", ""whoami.exe"", ""netstat.exe"", ""ping.exe"", ""ipconfig.exe"", ""wmic.exe"", ""del.exe"", ""cmd.exe"", ""powershell.exe"")  |fields agent_hostname, agent_version, actor_effective_username , causality_actor_process_image_name, causality_actor_process_command_line , actor_process_image_name, actor_process_command_line, action_process_image_name, action_process_image_command_line",0.7549265919004093
177,"Write XQL to convert ""when"" field to a datetime","dataset = hassio_events_raw | alter ts = split(when,""."") | alter time = parse_timestamp(""%Y-%m-%dT%H:%M:%S"",arrayindex(ts, 0),""+00:00"") | fields time , name , state | sort desc time",0.752997055848859
190,"Write XQL query to find rare processes started by Powershell, display the result with less than 5 execution event and sort in desc order","dataset = xdr_data  | filter event_type = PROCESS AND event_sub_type = PROCESS_START AND lowercase(actor_process_image_name) = ""powershell.exe""  | fields action_process_image_name as process_name, action_process_image_command_line as process_cmd, event_id  | comp count(event_id ) as counter by process_name , process_cmd  | filter counter <= 5  | sort desc counter  | filter action_remote_port = 3389 or action_remote_port = 21 or action_remote_port = 22 or action_remote_port = 23 or action_remote_port = 5900 or action_remote_port = 44 | filter action_total_download > 0 | comp sum(action_total_download ) as TotalDownload by action_local_ip , action_remote_port | fields action_local_ip , action_remote_port , TotalDownload | sort asc TotalDownload",0.7484884433355307
120,Write XQL query to Data Lake and look for children process of office processes that made more than 5 connections,"dataset = xdr_data  | filter event_type = NETWORK AND lowercase(causality_actor_process_image_name) IN (""winword.exe"", ""excel.exe"", ""powerpnt.exe"") AND causality_actor_process_image_name != actor_process_image_name  | fields agent_hostname as host_name, causality_actor_process_image_path as CGO_Path, causality_actor_process_command_line as CGO_CMD, causality_actor_primary_username as Username, actor_process_image_path as child_path, actor_process_command_line as child_cmd, actor_process_os_pid as child_pid, actor_process_image_sha256 as child_sha256, actor_process_execution_time as start_date, event_id  | comp count(event_id) as Counter by host_name, CGO_Path, CGO_CMD, Username, child_path, child_cmd, child_pid, child_sha256, start_date  | filter Counter >= 5  | sort desc Counter  | fields start_date, host_name, CGO_Path, CGO_CMD, Username, child_path, child_cmd, child_pid, child_sha256, Counter  | filter actor_process_image_name CONTAINS ""curl"" AND action_total_upload > 1048576  | alter app_id = arraystring(action_app_id_transitions,"","")  | fields actor_process_image_name as process_name, actor_process_command_line as process_cmd, action_local_ip as source_ip, action_local_port as source_port, action_remote_ip as remote_ip, action_remote_port as remote_port,app_id, action_total_upload as upload  | sort desc upload  | dataset = xdr_data | filter event_type = EVENT_LOG AND action_evtlog_event_id = 4625  | alter User_Name = arrayindex(regextract(action_evtlog_message, ""Account For Which Logon Failed:\r\n.*\r\n.*Account Name:.*?(\w.*)\r\n""),0) | alter Source_IP = arrayindex(regextract(action_evtlog_message, ""Source Network Address:.*?(\d+\.\d+\.\d+\.\d+)\r\n""),0) | alter event_generated1 = to_timestamp(event_timestamp , ""millis"") | alter eventDay = extract_time(event_generated1 , ""DAYOFYEAR""), eventHour = extract_time(event_generated1, ""HOUR"") | comp count() as failCount, max(event_generated1) as lastFail, values(Source_IP) as failure_ips, min(event_generated1) as firstFail by agent_hostname , User_Name, eventDay, eventHour | filter failCount > 2 | join (dataset=xdr_data | filter event_type = EVENT_LOG AND (action_evtlog_event_id = 4624) | alter Source_IP = arrayindex(regextract(action_evtlog_message, ""Source Network Address:.*?(\d+\.\d+\.\d+\.\d+)\r\n""),0) | alter User_Name = arrayindex(regextract(action_evtlog_message,""New Logon:\r\n.*\r\n.*?Account Name:.*?(\w.*?)\r\n""),0) | alter username_len = array_length(split(User_Name, ""\"")) | alter username_only = if(username_len > 1, arrayindex(split(User_Name, ""\""), 1), User_Name) | alter event_generated1 = to_timestamp(event_timestamp, ""millis"") | alter eventDay = extract_time(event_generated1 , ""DAYOFYEAR""), eventHour = extract_time(event_generated1, ""HOUR"") | comp count() as successCount, max(event_generated1) as lastSuccess, values(Source_IP) as success_ips, min(event_generated1) as firstSuccess by agent_hostname, username_only, eventDay, eventHour ) as success success.eventDay = eventDay and success.username_only = User_Name and success.eventHour = eventHour and success.agent_hostname = agent_hostname and success.firstSuccess > firstFail | filter successCount > 0 | fields failCount, successCount, firstFail, lastFail, firstSuccess, lastSuccess, User_Name, agent_hostname, success_ips, failure_ips //| sort desc failCount",0.7451368403004557
222,Write XQL query to agent store to alert on agent disconnect for specific time or find the agents specific agents in disconnected state after 72 hours,"dataset = endpoints |filter endpoint_status = DISCONNECTED |filter endpoint_type = TYPE_SERVER or endpoint_type = TYPE_WORKSTATION |alter last_seen_int = to_integer(timestamp_diff(current_time(),last_seen,""HOUR"")) |filter last_seen_int < 72 |fields endpoint_name, operating_system, agent_version, last_seen",0.7451198137765881
176,"Write XQL query to Data Lake to search for System32 process with .sys in file name and driver name has 4 letters, and display the not null entries.","dataset = xdr_data | filter action_file_path ~= ""C:\\Windows\\System32\\drivers"" | filter action_file_name ~= "".sys"" | alter suspicious_driver_name = arrayindex(regextract(action_file_name,""\b[a-zA-Z]{4}[.][s][y][s]\b""),0) | comp count_distinct(event_id) as Counter by suspicious_driver_name, action_file_path, action_file_sha256 | filter suspicious_driver_name != null",0.7396532891153236
83,"Return true if the list of IP addresses fall within the specified IP range. Note that the input type is a comma-separated list of IP addresses, and not an array of IP addresses.","alter inrange = incidrlist(""192.168.10.16,192.168.10.3"", 
                           ""192.168.10.0/24"")
| fields inrange
| limit 1
      ",0.7368212817883057
136,"Write XQL query to hunt for C2 communication by large known domains, from Windows or Linux, not from welknown process and browsers, not from internal IP addresses then counting how many times a remote_hostname/server/process triplets were used, display the result in asc order","dataset = xdr_data  | alter host_broken = split(action_external_hostname, ""."")  | alter TLD = arrayindex(host_broken , -1) | filter TLD not in (""com"",""local"", ""net"", ""org"",""gov"") | filter (agent_os_sub_type contains ""Server"" or agent_os_type = AGENT_OS_LINUX) and action_external_hostname !=""""  |filter actor_process_image_name != ""dns.exe"" and action_external_hostname not contains ""pki.goog"" and action_external_hostname not contains ""adobe.io"" and action_external_hostname not contains ""aka.ms"" and action_external_hostname not contains ""certum.pl""  | filter actor_process_image_name not in (""chrome.exe"", ""iexplore.exe"", ""MicrosoftEdgeCP.exe"", ""firefox.exe"", ""opera.exe"", ""MicrosoftEdgeSH.exe"", ""msedge.exe"", ""GoogleUpdate.exe"") | filter action_remote_ip != ""10.*"" and action_remote_ip != ""192.168.*"" | alter rfc1918_172 = incidr(action_remote_ip, ""172.16.0.0/12"") | filter rfc1918_172 = false | fields agent_hostname as Server_Name, action_remote_ip as remote_ip, action_external_hostname as remote_hostname, actor_process_image_name as process_name, actor_process_image_sha256 as sha_256 | comp count(_time) as Counter by remote_hostname, Server_Name, process_name  | sort asc Counter  | filter (action_external_hostname contains ""phicdn"") | alter User_Agent=json_extract(action_network_http, ""$.headers.User-Agent"")  | fields agent_hostname as Server_Name, action_remote_ip as remote_ip, action_external_hostname as remote_hostname, actor_process_image_name as process_name, actor_process_image_sha256 as sha_256, User_Agent | comp count_distinct(User_Agent) as Counter by remote_hostname, Server_Name, process_name, User_Agent | filter Counter >0 | sort asc Counter  | filter (action_external_hostname contains ""phicdn"") | alter User_Agent=json_extract(action_network_http, ""$.headers.User-Agent"")  | fields agent_hostname as Server_Name, action_remote_ip as remote_ip, action_external_hostname as remote_hostname, actor_process_image_name as process_name, actor_process_image_sha256 as sha_256, User_Agent | comp count_distinct(User_Agent) as Counter by remote_hostname, Server_Name, process_name, User_Agent | filter Counter >0 | sort asc Counter  | dataset = xdr_data | filter event_type = FILE and (event_sub_type = FILE_WRITE or event_sub_type = FILE_CREATE_NEW) and action_file_path contains ""Windows\System32\spool\drivers\"" | fields event_timestamp, action_file_path, event_type, event_sub_type, actor_process_image_name, agent_hostname | comp count(event_timestamp) as event_count, count_distinct(agent_hostname) as distinct_host_count by agent_hostname, action_file_path, event_type, event_sub_type, actor_process_image_name | filter (action_file_path contains ""\3\old"")  | dataset = xdr_data | filter actor_process_image_name = ""spoolsv.exe"" | fields event_timestamp, action_file_path, event_type, event_sub_type, actor_process_image_name, actor_remote_ip, agent_hostname | alter note = ""Print Spooler activity observed on this host in the past 30 days"" | comp count(event_timestamp) as event_count by agent_hostname, note",0.7348008295200346
126,Write XQL query to find orphaned XDR agent that's still consuming a license until it's been offline,"dataset = endpoints | fields endpoint_name, endpoint_id, endpoint_status | filter endpoint_status not in (CONNECTED, UNINSTALLED) | comp count (endpoint_name) as counter by endpoint_name | filter counter > 1 | sort desc counter",0.7336830450930145
213,Write XQL Query to detect Random 4 lettered .sys files dropped to C:\Windows\System32\drivers,"dataset = xdr_data | filter action_file_path ~= ""C:\\Windows\\System32\\drivers"" | filter action_file_name ~= "".sys"" | alter suspicious_driver_name = arrayindex(regextract(action_file_name,""\b[a-zA-Z]{4}[.][s][y][s]\b""),0) | comp count_distinct(event_id) as Counter by suspicious_driver_name, action_file_path, action_file_sha256 | filter suspicious_driver_name != null",0.7323235351776914
151,Write XQL query to find tool that often Live Off the Land that can be associated with doing recon in a linux system/network environment,"dataset = xdr_data | filter agent_os_type = AGENT_OS_LINUX and event_type = PROCESS | filter action_process_image_name = ""nmap"" or action_process_image_name = ""nc"" or action_process_image_name = ""tcpdump"" or action_process_image_name = ""snort"" or action_process_image_name = ""hping3"" or action_process_image_name = ""hping2"" or action_process_image_name = ""p0f"" | fields _time as Time, agent_hostname as AgentHostname, agent_ip_addresses as IPAddress, action_process_image_path as ImagePath, action_process_image_command_line as CommandLine, actor_effective_username as Username",0.7309767725449616
84,"If you want to evaluate a true array of IP addresses, convert the array to a comma-separated list using arraystring(). For example, using the pan_ngfw_traffic_raw dataset:","dataset = panw_ngfw_traffic_raw 
| filter dest_ip != null
| comp values(dest_ip) as dips by source_ip,action
| alter dips = arraystring(dips, "", "")
| alter inrange = incidrlist(dips, ""192.168.10.0/24"")
| fields source_ip, action, dips, inrange
| limit 100
",0.7286919679850369
97,"For any agent_id that contains a dotted decimal IP address, mask the IP address. Use the dedup stage to reduce the result set to first-seen agent_id values.","dataset = xdr_data 
| fields agent_id 
| alter clean_agent_id = replex(agent_id, 
                              ""[\d]+\.[\d]+\.[\d]+\.[\d]+"", 
                              ""xxx.xxx.xx.xx"") 
| dedup agent_id by asc _time
",0.7266686786475252
43,"For the last 10 hours from when the query is sent, return a maximum of 100 xdr_data records.","config timeframe = 10h
| dataset = xdr_data
| limit 100",0.7262109649204394
131,Write XQL query to Data Lake and find the installation of Atlassian confluence java program on both Linux and Windows and display by number of events,"dataset = xdr_data  | filter (actor_process_image_name contains ""tomcat"" and actor_process_image_path contains ""Atlassian"") or (actor_process_image_path contains ""confluence"" and actor_process_image_name contains ""java"" ) | fields event_timestamp, action_file_path, event_type, event_sub_type, actor_process_image_name, actor_remote_ip, agent_hostname, agent_id, actor_process_image_path | alter note = ""Atlassian Confluence observed on this host in the past 30 days"" | comp count(event_timestamp) as event_count by agent_hostname, note, actor_process_image_path",0.7251844255289409
53,Return xdr_data records where the event_type is NETWORK and the event_sub_type is NETWORK_HTTP_HEADER,"dataset = xdr_data 
| filter event_type = NETWORK and event_sub_type = NETWORK_HTTP_HEADER
",0.7246765737379534
200,Write XQL query to Data lake and look for Solarwinds infected process drops executable files with known binary extension to disk.,"dataset = xdr_data  | filter event_type = FILE AND event_sub_type = FILE_WRITE  |filter lowercase(actor_process_image_name) = ""solarwinds.businesslayerhost*.exe""  |filter action_file_extension IN (""dll"", ""exe"", ""sys"", ""msi"", ""scr"", ""ocx"", ""cmd"", ""bat"", ""ps1"", ""vba"", ""vbs"", ""com"", ""cpl"", ""bin"", ""vbe"")  |fields causality_actor_process_image_path, actor_process_image_path, agent_hostname, action_file_path, action_file_name  |dedup causality_actor_process_image_path, actor_process_image_path, agent_hostname, action_file_name  | filter event_type = NETWORK  |filter lowercase(actor_process_image_name) = ""solarwinds.businesslayerhost*.exe""  |filter action_external_hostname NOT CONTAINS ""solarwinds.com"" AND action_external_hostname != ""*.local""  |fields causality_actor_process_image_path, actor_process_image_path, agent_hostname, action_remote_ip, action_external_hostname  |dedup causality_actor_process_image_path, actor_process_image_path, agent_hostname, action_remote_ip, action_external_hostname  | filter event_type = REGISTRY  |filter lowercase(actor_process_image_name) = ""solarwinds.businesslayerhost*.exe""  |filter action_registry_key_name = ""HKEY_LOCAL_MACHINE\SYSTEM\*\Services\*""  |fields causality_actor_process_image_path, actor_process_image_path, agent_hostname, action_registry_key_name, action_registry_value_name, action_registry_data  |dedup causality_actor_process_image_path, actor_process_image_path, agent_hostname, action_registry_key_name, action_registry_value_name, action_registry_data  | filter action_rpc_func_str_call_fields != null  |filter lowercase(actor_process_image_name) = ""solarwinds.businesslayerhost*.exe""  |fields agent_hostname, action_rpc_func_str_call_fields  | filter arraystring(action_app_id_transitions, "","") CONTAINS ""solarwinds"" OR dst_action_external_hostname = ""api.solarwinds.com"" OR action_external_hostname = ""api.solarwinds.com"" OR lowercase(action_process_signature_vendor) CONTAINS ""solarwinds""  | fields agent_hostname, action_local_ip|dedup agent_hostname, action_local_ip  | filter event_type = NETWORK and action_download > 0  | fields action_download, action_local_ip | comp sum(action_download) as total_download by action_local_ip  | sort desc total_download  | alter TotalGB = divide(total_download ,1048576) | fields action_local_ip , TotalGB | limit 10  | view graph type = column subtype = grouped layout = horizontal header = ""Top Downloads By IP"" xaxis = action_local_ip yaxis = TotalGB yaxistitle = ""IP Address"" seriestitle(""TotalGB"",""Traffic In ",0.7228819177728005
185,"Write XQL query to Data Lake to get Process name does not equal internal name for LOLbin, Looking at process start events where we have the process original info","dataset = xdr_data  | filter event_type= PROCESS AND event_sub_type = PROCESS_START AND action_process_file_info != null  | alter original_name=json_extract_scalar(lowercase(action_process_file_info), ""$.original_name"")  | alter remove_exe_process = if(lowercase(action_process_image_name) CONTAINS "".exe"", replace(lowercase(action_process_image_name),"".exe"",""""),lowercase(action_process_image_name))  | alter remove_exe_internal = if(original_name CONTAINS "".exe"", replace(original_name,"".exe"",""""),original_name)  | alter remove_exe_internal = if(remove_exe_internal CONTAINS ""_exe"", replace(remove_exe_internal,""_exe"",""""),remove_exe_internal)  | filter lowercase(remove_exe_internal) != lowercase(remove_exe_process) AND lowercase(remove_exe_internal) IN (""powershell"", ""wscript"", ""cscript"", ""mshta"", ""bitsadmin"", ""certutil"", ""ftp"", ""gscript"", ""hh"", ""reg"", ""regsvr32"", ""wmic"", ""rundll32"", ""netsh"", ""cmd"", ""arp"", ""route"", ""netstat"", ""net"", ""systeminfo"", ""wevtutil"", ""whoami"", ""ipconfig"", ""tasklist"", ""sc"", ""schtasks"")  | fields action_process_image_name as Process_Name, original_name as Full_Original_Name, action_process_image_path as Process_Path, remove_exe_internal as Clean_original_Name, remove_exe_process as Clean_Process_Name  | dedup Process_Name, Full_Original_Name, Process_Path, Clean_original_Name, Clean_Process_Name by asc _time  | filter len(action_process_image_name) < 6 AND agent_os_type = AGENT_OS_WINDOWS AND action_process_image_name CONTAINS "".""  | fields action_process_image_name as process_name, action_process_image_command_line as process_cmd, action_process_image_sha256 as process_sha256, actor_process_image_name as parent_name, actor_process_command_line as parent_cmd  | dedup process_name, process_cmd, process_sha256, parent_name , parent_cmd by asc _time  | comp count (_id) as Counter by app | join (dataset = panw_ngfw_traffic_raw ) as JD app = JD.app | fields Counter , app, source_ip | sort asc Counter",0.7227310205160835
214,Write XQL query to identify any SSL certificates based on SNI that are now expired based on when they were last seen in the past month and sort by the most recent seen,"dataset = xdr_data  | filter ssl_req_chello_sni_sample contains ""paloaltonetworks""  | alter currenttime = current_time() | alter cert_expy = timestamp_seconds(to_integer(divide(to_number(json_extract_scalar(to_json_string(arrayindex(ssl_data, 0)), ""$.certificate_not_valid_after"")), 1000)))  | alter days_since_expy = timestamp_diff(currenttime, cert_expy, ""DAY"")  | filter days_since_expy >= 0  | fields _time as last_seen, ssl_req_chello_sni_sample as cert_name, cert_expy, currenttime, days_since_expy, ssl_data | dedup cert_name  | sort desc last_seen  | filter ssl_req_chello_sni_sample contains ""paloaltonetworks""  | alter currenttime = current_time() | alter cert_expy = timestamp_seconds(to_integer(divide(to_number(json_extract_scalar(to_json_string(arrayindex(ssl_data, 0)), ""$.certificate_not_valid_after"")), 1000)))  | alter days_to_expy = timestamp_diff(cert_expy , currenttime, ""DAY"")  | filter days_to_expy > 0 and days_to_expy < 90  | fields _time as last_seen, ssl_req_chello_sni_sample as cert_name, cert_expy, currenttime, days_to_expy, ssl_data | dedup cert_name  | sort desc last_seen  | bin _time span = 1d | filter event_type = ENUM.PROCESS and event_sub_type = ENUM.PROCESS_START | filter action_process_image_name = ""powershell.exe"" | alter new_time = format_timestamp(""%d.%m.%Y"",_time) | comp count(action_process_image_name ) as PowerShellInvocations by new_time | view graph type = column subtype = grouped show_callouts = `true` xaxis = new_time yaxis = PowerShellInvocations default_limit = `false`",0.722237847853386
76,"Given a list of fields that contain usernames, select the first one that is not null and display it in the username column","dataset = xdr_data 
| fields actor_primary_username,
       os_actor_primary_username,
       causality_actor_primary_username 
| alter username = coalesce(actor_primary_username,
                          os_actor_primary_username,
                          causality_actor_primary_username) ",0.7209755398044382
44,"Since the last two days until now when the query is run, return a maximum of 100 xdr_data records.","config timeframe between ""2d"" and ""now""
| dataset = xdr_data
| limit 100",0.720631014424767
110,"Write XQL query to Data Lake for Remote Ip address 72.5.65.111 sinkhole  and session not generated by popular browser, then display the result by agent_hostname, action_local_ip, action_remote_ip, action_remote_port,
dst_action_external_hostname, actor_process_image_path, actor_process_image_sha256, actor_process_command_line with deduplication, sort the result by time in desc.","preset = network_story  | filter action_remote_ip = ""72.5.65.111"" AND lowercase(actor_process_image_name) NOT IN (""chrome.exe"", ""msedge.exe"",""opera.exe"", ""firefox.exe"", ""iexplore.exe"")  | fields agent_hostname, action_local_ip, action_remote_ip, action_remote_port, dst_action_external_hostname, actor_process_image_path, actor_process_image_sha256, actor_process_command_line  | dedup agent_hostname, action_local_ip, action_remote_ip, action_remote_port, dst_action_external_hostname, actor_process_image_path, actor_process_image_sha256, actor_process_command_line by asc _time  | sort desc _time  | filter type = ""computer"" | alter dss_domain_name_lower = lowercase(domain_name), dss_name_lower = lowercase(name) | fields dss_domain_name_lower , dss_name_lower | join type = left (dataset = endpoints | alter eps_domain_lower = lowercase (domain ), eps_endpoint_name_lower = lowercase(endpoint_name ) | fields eps_domain_lower , eps_endpoint_name_lower, agent_version ) as eps dss_domain_name_lower = eps.eps_domain_lower and dss_name_lower = eps.eps_endpoint_name_lower | fields dss_domain_name_lower, dss_name_lower , agent_version | filter agent_version = NULL",0.7199691435960422
236,Write XQL query to agent dataset and find out whether XDR agents are in a Protection Pause for too long more than 5 minutes,"dataset = agent_auditing | filter description contains ""Protection successfully paused on"" OR description contains ""Protection successfully resumed on"" | dedup endpoint_id by desc received_time | filter description contains ""Protection successfully paused on"" | fields endpoint_name as PausedEndpointName, received_time as ProtectionPauseTimestamp | alter ct = current_time() | alter ProtectionPausedSeconds =timestamp_diff(ct ,ProtectionPauseTimestamp ,""SECOND"") | filter ProtectionPauseTimestamp < to_timestamp(add(to_epoch(current_time()),-300))",0.7186654843873226
9,"Write XQL query to Data Lake and return the storage_device_drive_type value from the action_file_device_info JSON field, and return the record if it is 1.","dataset = panw_ngfw_traffic_raw | filter action = \""allow\"" | comp count(_id) as total_traffic by rule_matched,action, from_zone, to_zone | fields rule_matched, action, from_zone, to_zone, total_traffic | sort desc total_traffic",0.7186205962058614
3,"Write XQL query to Data Lake, given three username fields, select the first one that is not null and display it in the default_username column, making sure to never have a default_username that is root","dataset = xdr_data | fields actor_primary_username, os_actor_primary_username, causality_actor_primary_username | alter default_username = coalesce(actor_primary_username, os_actor_primary_username, causality_actor_primary_username) | filter default_username != \""root\""",0.7182239585726047
105,Return the action_file_device_info field in JSON format.,"dataset = xdr_data 
| fields action_file_device_info as afdi 
| alter the_json_string = to_json_string(afdi) 
| filter afdi != null 
| limit 10
",0.717192958834783
237,Write XQL query to DSS dataset and shows the percentage of AD machines from domain CONTOSO with XDR agent on them and display as a single graph percentage,"dataset = pan_dss_raw | filter type = ""computer"" | filter last_logon_timestamp > add(to_epoch(date_floor(current_time(),""w"", ""Europe/Brussels"")),-604800) | comp count(name) as total_in_ad | union ( dataset = pan_dss_raw | filter type = ""computer"" | filter last_logon_timestamp > add(to_epoch(date_floor(current_time(),""w"", ""Europe/Brussels"")),-604800) | join type = left ( dataset = endpoints | filter endpoint_status not in (ENUM.DELETED ,ENUM.PARTIAL_REGISTRATION ,ENUM.UNINSTALLED ,ENUM.VDI_PENDING_LOGIN )  | filter domain ~= ""CONTOSO""  | replacenull endpoint_id = ""no_endpoint"" | comp count(endpoint_name) as total_in_ad_with_agent_deployed ) | comp first(total_in_ad_with_agent_deployed) as total_in_ad_with_agent_deployed addrawdata = true as r | arrayexpand r | alter total_in_ad = r->total_in_ad | fields total_in_ad_with_agent_deployed, total_in_ad | limit 1 | alter percentage_ad_covered = round(multiply(divide(to_integer(total_in_ad_with_agent_deployed),to_integer(total_in_ad)),100)) | view graph type = single subtype = standard header = ""Computers in AD with XDR Agent"" xaxis = total_in_ad_with_agent_deployed yaxis = percentage_ad_covered dataunit = ""%"" default_limit = `false` headerfontsize = 34",0.716886946411448
60,Save the results of a simple query to a named dataset.,"dataset = xdr_data 
| fields action_boot_time as abt
| filter abt != null
| target type=dataset abt_dataset
",0.7165505651956832
141,Write XQL query to Data Lake to detect possible PrintNightmare exploitation attempts on Windows Servers by looking for errors generated by the Print Spooler,"| dataset = xdr_data | filter event_type = PROCESS and event_sub_type = PROCESS_START and action_process_image_name = ""werfault.exe"" and actor_process_image_name = ""spoolsv.exe"" and agent_os_sub_type ~= ""^Windows Server.*"" | fields agent_hostname, action_process_image_name, actor_process_image_name, agent_os_sub_type | alter note = ""spoolsv.exe spawns werfault.exe""",0.7154619469511502
85,Return the storage_device_name value from the action_file_device_info field.,"dataset = xdr_data 
| fields action_file_device_info as afdi 
| alter sdn = json_extract(to_json_string(afdi), ""$.storage_device_name"") 
| filter afdi != null
",0.7139315724167498
235,Write XQL query to endpoints dataset and count the total number agents installed and then get the number of agents that had reported over the selected time period. It creates a percentage and populates this to a gauge graph,"dataset = endpoints | fields endpoint_id | join (dataset = xdr_data | dedup agent_id) as Agents Agents.agent_id = endpoint_id | join (dataset = endpoints ) as EP 1 = 1 | fields endpoint_id , agent_id | comp count_distinct(agent_id ) as Seen by endpoint_id | comp count_distinct(endpoint_id) as Total by Seen | alter pct = divide (Seen,Total) | alter displaypct = multiply(pct,100) | alter Percent = round(displaypct) | fields Percent | view graph type = gauge subtype = radial header = ""Percentage Of Agents Online"" yaxis = Percent maxscalerange = 100 scale_threshold(""#ff0000"",""#fcf301"",""50"",""#44ee20"",""90"")",0.7138993448613815
133,Write XQL query to hunt for ISO files dropped by browsers as the threat actor leverages ISO files as part of the exploitation attempts,"dataset = xdr_data | filter actor_process_image_name in (""chrome.exe"", ""msedge.exe"", ""firefox.exe"", ""iexplore.exe"", ""google chrome"", ""firefox"", ""safari"") and action_file_extension = ""iso"" | dedup agent_id, agent_hostname, action_file_name, action_file_path, action_file_sha256, action_file_size | fields agent_id, agent_hostname, action_file_name, action_file_path, action_file_sha256, action_file_size",0.7115919023114374
67,"Returns a final array to a field called x that is comprised of the elements [1,2].","dataset = xdr_data
| alter x = arraycreate(""1"", ""2"")
| fields x",0.710761153384305
101,Display a human-readable timestamp for the action_file_access_time field.,alter access_timestamp = timestamp_seconds(1611882205) | limit 1 ,0.7102426488136364
73,"Extract the MAC address from the agent_interface_map field. This example uses the json_extract_scalar, to_json_string, json_extract_array, and arraystring functions to extract the desired information.","dataset = xdr_data 
| alter mac = 
    arraystring (
        arraymap (
            json_extract_array (to_json_string(agent_interface_map),""$.""),
            json_extract_scalar (""@element"", ""$.mac"")
        ), "","")
",0.7072224287086314
87,Show domain names that are more than 100 characters in length.,"dataset = xdr_data 
| fields dns_query_name 
| filter len(dns_query_name) > 100 
| limit 10 ",0.7068795778826791
188,"Write XQL query to Data Lake to search for rare executions of Rundll32 from Syswow64, showing just cases that happneded 5 times or less then sort by counter in desc.","dataset = xdr_data  | filter lowercase(action_process_image_name) = ""rundll32.exe"" AND lowercase(action_process_image_path) CONTAINS ""syswow64""  | alter process_cmd = if(lowercase(action_process_image_command_line) CONTAINS ""c:\users"", replex(lowercase(action_process_image_command_line), ""c:\\users\\[a-zA-Z0-9.]*"", ""c:\\users\\USERNAME""), action_process_image_command_line)  | fields action_process_image_path as process_path, process_cmd, actor_process_image_path as parent_path, actor_process_command_line as parent_cmd, event_id, causality_actor_process_image_path as cgo_path, causality_actor_process_command_line as cgo_cmd  | comp count(event_id) as counter by process_path, process_cmd, parent_path, parent_cmd, cgo_path, cgo_cmd  | filter counter <= 5  | sort desc counter  | filter event_type = STORY and arraystring(action_app_id_transitions,""-"") not in(""ip-tcp"", ""ip-udp"","""")  | alter app_id = arraystring(action_app_id_transitions,"","")  | fields app_id, event_id  | comp count(event_id) as counter by app_id  | filter counter < 100  | sort asc counter  | view graph type = pie xaxis = app_id yaxis = counter",0.7050764737495019
62,"Returns a table with 3 columns called EVENT_ID, TOP_COUNT, and TOP_PERCENT with up to 10 unique values for event_id with the corresponding counts and percentages.","dataset = xdr_data 
| top event_id",0.704599657463779
46,"Since the last four days until the next 5 days when the query is run, return a maximum of 100 xdr_data records.","config timeframe between ""-4d"" and ""+5d""
| dataset = xdr_data
| limit 100",0.7025523519665606
134,Write XQL query to hunt for √írundll32.exe√ì loading √ídocuments.dll√ì or √íGraphicalComponent.dll√ì via command line,"dataset = xdr_data | filter action_process_image_name = ""rundll32.exe"" and action_process_image_command_line ~= "".*(Documents.dll|GraphicalComponent.dll).*"" | dedup agent_id, agent_hostname, actor_process_image_name, actor_process_image_command_line , action_process_image_name, action_process_image_command_line | fields agent_id, agent_hostname, actor_process_image_name, actor_process_image_command_line , action_process_image_name, action_process_image_command_line",0.7010741666549168
27,Returns a single integer value after approximately counting the number of distinct values in the event_id field.,"dataset = xdr_data
| fields event_id
| comp approx_count(event_id)",0.6991512173380714
66,"Count the number of unique files accessed by each user, and show a column graph of the results. This query uses comp count_distinct to calculate the number of unique files per username.","dataset = xdr_data 
| fields actor_effective_username as username, action_file_path as file_path 
| filter file_path != null and username != null 
| comp count_distinct(file_path) as file_count by username 
| view graph type = column xaxis = username yaxis = file_count
",0.6990926186780574
28,Returns the approximate boundaries for a group of distinct values in the event_id field.,"dataset = xdr_data
| fields event_id
| comp approx_quantiles(event_id, 100, true)",0.6970379219923202
108,Remove '.exe' from the end of the action_process_image_name field value.,"dataset = xdr_data 
| fields action_process_image_name as apin 
| filter apin != null 
| alter remove_exe_process = rtrim(apin, "".exe"") 
| limit 10
",0.6964050411070711
45,"Since the Unix epoch time 00:00:00 UTC on 1 January 1970 until the past 2 years when the query is run, return a maximum of 100 xdr_data records.","config timeframe between ""begin"" and ""2y""
| dataset = xdr_data
| limit 100",0.6952180056041506
50,Return the first occurrence seen by for any given actor_primary_username. field value.,"dataset = xdr_data 
| fields actor_primary_username as apu 
| filter apu != null 
| dedup apu by asc apu
",0.6944018743256496
10,"Write XQL query to Data Lake and extract the Account Name from the action_evtlog_message and use regex \""\\t\\t.*\\r\\n\"". Use the arrayindex and split functions to extract the actual account name from the array created by regextract","dataset = xdr_data | fields action_evtlog_message as aem | filter aem != null | alter account_name = arrayindex( split( arrayindex( regextract(aem, \""Account Name:\\t\\t.*\\r\\n\"") ,0) , \"":\"") ,1) | | filter account_name != null | limit 10 ",0.6943027427512084
25,"For the predefined query called ""CreateRole operation parsed to fields"", returns a maximum of 100 records, where the accessKeyId equals ""1234"".","call ""CreateRole operation parsed to fields""
| filter accessKeyId = ""1234""
| limit 100",0.693274058248402
29,Returns the approximate boundaries for a group of non-distinct values in the event_id field.,"dataset = xdr_data
| fields event_id
| comp approx_quantiles(event_id, 100)",0.6904058975916854
74,Returns a final array that is created from a merge of the arraymap by extracting the IP address from the agent_interface_map field and the first IPV4 address found in the first element of the agent_interface_map array. This example uses the to_json_string and json_extract_array functions to extract the desired information.,"dataset = xdr_data
| alter a =
arraymerge (arraymap (agent_interface_map, to_json_string (json_extract_array (to_json_string(""@element""), ""$.ipv4"") ) ) )",0.6890878352774477
21,"Then if you run an arrayexpand stage using the array_values field, with a limit of 3, the result set includes the following records:","dataset=my_dataset 
| arrayexpand array_values limit 3
",0.6888841468280673
30,"Returns an approximate count of the top 10 agent IDs in the agent_id field that appear the most frequently. The return value is an array containing 10 JSON strings with a ""value"" and ""count"".","dataset = xdr_data
| fields agent_id
| comp approx_top(agent_id, 10)",0.6823496287618087
95,Extract the Account Name from the action_evtlog_message. Use the arrayindex and split functions to extract the actual account name from the array created by regextract.,"dataset = xdr_data 
| fields action_evtlog_message as aem 
| filter aem != null 
| alter account_name = 
    arrayindex(
        split(
            arrayindex(
                regextract(aem, ""Account Name:\t\t.*\r\n"")
            ,0)
        , "":"")
    ,1) |
| filter account_name != null 
| limit 10 ",0.6811049663423046
20,"Given three username fields, use the coalesce function to return a username value in the default_username field, making sure to never have a default_username that is root.","dataset = xdr_data 
| fields actor_primary_username, 
         os_actor_primary_username, 
         causality_actor_primary_username 
| alter default_username = coalesce(actor_primary_username, 
                                    os_actor_primary_username, 
                                    causality_actor_primary_username)
| filter default_username != ""root""",0.6810992440723411
22,"The result records created by expandarray are in no particular order. However, you can use the Sort stage to sort the results:","dataset=my_dataset 
| arrayexpand array_values 
| sort asc array_values
",0.678775149337302
49,Return the last chronologically occurring record for any given actor_primary_username value.,"dataset = xdr_data 
| fields actor_primary_username as apu 
| filter apu != null 
| dedup apu by desc _time
",0.6770608958021184
48,"Return unique values for the actor_primary_username field. For any given field value, return the first chronologically occurring record.","dataset = xdr_data 
| fields actor_primary_username as apu 
| filter apu != null 
| dedup apu by asc _time
",0.6730562587095282
65,"Use the dedup stage collect unique combinations of event_type and event_sub_type values. Highlight the word ""STREAM"" when it appears in the result set.","dataset = xdr_data 
| fields event_type, event_sub_type 
| dedup event_type, event_sub_type by asc _time 
| view highlight fields = event_sub_type values = ""STREAM""",0.6695267462595185
61,"Subsequently, you can query the new dataset. Notice that the field names used by the new dataset conform to the aliases that you used when you created the dataset:","dataset = abt_dataset 
| filter abt = 1603986614040
",0.6691763013902303
6,Write XQL query to Data Lake and return the maximum value of the action_total_download field for all records that have matching values for their actor_process_image_path and actor_process_command_line values. The query returns a maximum of 100 xdr_data records and includes a raw_data column listing the raw data events used to display the final comp results.,"dataset = xdr_data | fields actor_process_image_path as Process_Path, actor_process_command_line as Process_CMD, action_total_download as Download | filter Download > 0 | limit 100 | comp max(Download) as max_download by Process_Path, Process_CMD addrawdata = true as raw_data",0.6644214473454613
59,"Return the action_country and event_timestamp fields from all xdr_data records where the action_country field is not ""-"". Sort the result set first by the action_country field value in descending order, then by event_timestamp field in ascending order.","dataset = xdr_data 
| fields action_country as ac, event_timestamp as et 
| replacenull ac = ""N/A"" 
| filter ac != ""-""
| sort desc ac, asc et
",0.6639412463928133
31,"Returns an approximate sum of the top 10 agent IDs in the agent_id field by their action_session_duration. The return value is an array containing 10 JSON strings with a ""value"" and ""sum"" for each agent_id.","dataset = xdr_data
| fields agent_id, action_session_duration
| comp approx_top(agent_id, 10, action_session_duration)",0.6634330073950648
77,"Display the first non-NULL action_boot_time field value. In a second column called abt_string, use the concat() function to prepend ""str: "" to the value, and then display it.","dataset = xdr_data 
| fields action_boot_time as abt 
| filter abt != null 
| alter abt_string = concat(""str: "", to_string(abt)) 
| limit 1 ",0.6631486373701676
69,"When the dfe_labels array is not empty, use the Alter stage to assign a value to a field called x that returns the value of the arrayfilter function. The arrayfilter function filters the dfe_labels array for the array element set to network.","dataset = xdr_data 
| filter dfe_labels != null
| alter x = arrayfilter(dfe_labels , ""@element"" = ""network"") 
| fields x, dfe_labels 
| limit 100 ",0.6631341406483651
107,"Display the first non-NULL action_boot_time field value. In a second column called abt_string, use the concat function to prepend ""str: "" to the value, and then display it.","dataset = xdr_data 
| fields action_boot_time as abt 
| filter abt != null 
| alter abt_string = concat(""str: "", to_string(abt)) 
| limit 1 ",0.6630335957075078
52,"Return the action_country field from all xdr_data records where the action_country field is both not null and not ""-"". Also include all fields with names that match event_* except for event_type","dataset = xdr_data 
| fields action_country as ac 
| fields event_* 
| fields - event_type 
| filter ac != null and ac != ""-"" ",0.6626861044702796
75,"Retrieve all action_app_id_transitions that are not null, combine each array into a string where array elements are delimited by "" : "", and then use Dedup the resulting string.","dataset = xdr_data 
| fields action_app_id_transitions  as aait 
| alter transitions_string = arraystring(aait, "" : "") 
| dedup transitions_string by asc _time 
| filter aait != null
",0.6619623994547807
55,"Return a maximum of 1000 xdr_data records with all the available geolocation data with the predefined column names, and add the specified suffix _remote_id to each predefined column name, where no record with a null value for action_remote_ip is included.","dataset = xdr_data 
| limit 1000
| filter action_remote_ip != null
| iploc action_remote_ip suffix=_remote_id 
",0.660183804813288
63,"Returns a table with 3 columns called ACTION_COUNTRY, EVENT_ID, and TOTAL with a single unique value for the event_id for each action_country with the corresponding count in the TOTAL column.","dataset = xdr_data 
| top 1 event_id by action_country top_count as total",0.65986476313978
24,"Return a maximum of 1,000 xdr_data records with the events of the _time field grouped by 1-hour increments starting from the epoch time 1615353499.","dataset = xdr_data 
| bin _time span = 1h timeshift = 1615353499 
| limit 1000
",0.6575519416858988
58,"Return the action_country field from every xdr_data records where the action_country field is null, using the string N/A in the place of an empty field value.","dataset = xdr_data 
| fields action_country as ac 
| replacenull ac = ""N/A"" 
| filter ac = ""N/A""",0.6556695696078723
64,"First, create a dataset using the target stage. This results in a persistent stage that we can use later with a union stage.","dataset = xdr_data
| filter event_type = FILE and event_sub_type = FILE_WRITE 
| fields agent_id, action_file_sha256 as file_hash, agent_hostname 
| target type=dataset file_event
",0.6555598822203101
68,Use the Alter stage to assign a value to a field called x that returns the value of the arrayfilter function. The arrayfilter function filters the dfe_labels array and returns the array value when the backtrace_identities array contains more than 1 element.,"dataset in (xdr_data) 
| alter x = arrayfilter(dfe_labels , array_length(backtrace_identities) > 1) 
| fields x, dfe_labels 
| limit 100 ",0.6550230039032632
5,Write XQL query to Data Lake and return a count of all values seen for the actor_process_image_path field for all records that have matching values for their actor_process_image_path and actor_process_command_line values. The query returns a maximum of 100 xdr_data records where action_total_download is higher than 0 and includes a raw_data column listing the raw data events used to display the final comp results.,"dataset = xdr_data | fields actor_process_image_path as Process_Path, actor_process_command_line as Process_CMD, action_total_download as Download | filter Download > 0 | limit 100 | comp count(Process_Path) as num_process_path by process_path, process_cmd addrawdata = true as raw_data | sort desc process_path",0.6535980733669531
82,"If '.exe' is present on the action_process_image_name field value, replace that substring with an empty string. This example uses the replace and lowercase functions, as well as the contains operator to perform the conditional check.","dataset = xdr_data 
| fields action_process_image_name as apin 
| filter apin != null 
| alter remove_exe_process = 
    if(lowercase(apin) contains "".exe"",   | limit 10
",0.6532871896332151
56,"Return a maximum of 1000 xdr_data records with the specific geolocation data associated with the action_remote_ip field that includes the name of the country (contained in loc_country ) in a column called country, where no record with a null value for either country or action_remote_ip is included. The results are displayed in a graph type of kind map, where the x-axis represents the country and the y-axis the action_remote_ip.","dataset = xdr_data 
| limit 1000
| iploc action_remote_ip loc_country as country  
| filter country != null and action_remote_ip  != null 
| view graph type = map xaxis = country yaxis = action_remote_ip
",0.6518998136360069
96,"If '.exe' is present on the action_process_image_name field value, replace that substring with an empty string. This example uses the if and lowercase functions, as well as the contains operator to perform the conditional check.","dataset = xdr_data 
| fields action_process_image_name as apin 
| filter apin != null 
| alter remove_exe_process = if(lowercase(apin) contains "".exe"",
                              replace(lowercase(apin),"".exe"",""""),
                              lowercase(apin)) 
| limit 10
",0.6508387798554753
54,"Return a maximum of 1000 xdr_data records with the specific geolocation data associated with the action_remote_ip field, where no record with a null value for action_remote_ip is included, and displays the name of the city in a column called city and a combination of the latitude and longitude in a column called loc_latlon with comma-separated values of latitude and longitude.","dataset = xdr_data
| limit 1000 
| filter action_remote_ip != null 
| iploc action_remote_ip loc_city as city, loc_latlon
",0.6506975124501899
116,"Write XQL query to Data Lake to look for Binaries dropped than executed. The query finds file being written to disk with information related to file path, signer and actor. And looks for a process start events with its relevant fields, then setting conditions to join by, such as making sure the file written to disk is the same process that was executed on the same agent, AND that the process that executed the new file is
not the same as the one who wrote it to disk.","dataset = xdr_data  | filter event_type = FILE AND event_sub_type = FILE_WRITE  | fields agent_id, action_file_sha256 as file_hash, agent_hostname, actor_process_image_path as writer_path, actor_process_signature_vendor as writer_signer, action_file_path as written_path, _time as written_time  | join (dataset=xdr_data | filter event_type = PROCESS AND event_sub_type = PROCESS_START | fields actor_process_image_path as executed_by, actor_process_signature_vendor as executor_signer, agent_id, action_process_image_sha256, action_process_image_path as executed_path, action_process_signature_vendor as executed_vendor, _time as executed_time) as execution agent_id = execution.agent_id AND file_hash=execution.action_process_image_sha256 AND written_path=execution.executed_path AND writer_path != execution.executed_by  | dedup agent_hostname, writer_path, writer_signer, file_hash, written_path, executed_path, executed_vendor, executed_by, executor_signer by asc executed_time  | fields agent_hostname, writer_path, writer_signer, file_hash, written_path, executed_path, executed_vendor, executed_by, executor_signer  | filter lowercase(action_file_path) ~= ""c:\\users\\public\\.*?.(exe|dll|sys|scr|msi)"" AND event_sub_type = FILE_WRITE AND action_file_sha256 != null  | fields action_file_path as file_path, action_file_sha256 as file_sha256, actor_process_image_path as process_path, actor_process_command_line as process_cmd, causality_actor_process_image_path as cgo_path, causality_actor_process_command_line as cgo_cmd  | dedup file_path, file_sha256, process_path, process_cmd, cgo_path, cgo_cmd by asc _time  | dataset = xdr_data | filter event_type = EVENT_LOG AND action_evtlog_event_id = 4624  | alter Source_IP = arrayindex(regextract(action_evtlog_message, ""Source Network Address:.*?(\d+\.\d+\.\d+\.\d+)\r\n""),0), User_Name = arrayindex(regextract(action_evtlog_message,""New Logon:\r\n.*\r\n.*?Account Name:.*?(\w.*?)\r\n""),0) | fields User_Name, Source_IP, agent_hostname as logged_in_to_host | filter (User_Name != ""SYSTEM"" AND User_Name NOT CONTAINS ""$"") AND Source_IP != ""0.0.0.0"" | comp count(User_Name ) as total_successful_logins by Source_IP, User_Name ,logged_in_to_host | fields total_successful_logins , Source_IP , User_Name ,logged_in_to_host |alter internal1 = incidr(Source_IP , ""172.16.0.0/12"")  |alter internal2 = incidr(Source_IP, ""10.0.0.0/8"") |alter internal3 = incidr(Source_IP, ""192.168.0.0/16"") |filter internal1 = false AND internal2 = false AND internal3 = false AND source_ip != ""127.0.0.1"" | fields -internal1 | fields -internal2 | fields -internal3 | join type = left ( filter event_type = EVENT_LOG AND (action_evtlog_event_id = 4625)  | alter Failed_Source_IP = arrayindex(regextract(action_evtlog_message, ""Source Network Address:.*?(\d+\.\d+\.\d+\.\d+)\r\n""),0) | comp count(Failed_Source_IP) as total_failed_logins by agent_hostname ,Failed_Source_IP ) as failed_logins failed_logins.Failed_Source_IP = Source_IP and failed_logins.agent_hostname = logged_in_to_host | filter total_failed_logins > total_successful_logins AND total_failed_logins > 20  | fields -Failed_Source_IP | fields -agent_hostname | alter ratio_between_fails_to_success = divide(total_failed_logins , total_successful_logins )",0.6503580412983557
89,"Returns a final object to a field called a that contains the key and value pair {â€œ2â€:â€œpasswordâ€}, where the ""password"" value is comprised by joining 2 values together.","dataset = xdr_data
| alter a = object_create(""2"", concat(""pass"", ""word""))
| fields a",0.6500160557408934
88,"Convert all actor_process_image_name field values that are not null to lowercase, and return a list of unique values.","dataset = xdr_data 
| fields actor_process_image_name as apin 
| dedup apin by asc _time 
| filter apin != null 
| alter apin = lowercase(apin)",0.6456870688513178
109,"Convert all actor_process_image_name field values that are not null to uppercase, and return a list of unique values.","dataset = xdr_data 
| fields actor_process_image_name as apin 
| dedup apin by asc _time 
| filter apin != null 
| alter apin = uppercase(apin)",0.6427336492363153
23,"Return a maximum of 1,000 xdr_data records with the events of the action_total_upload field grouped by 50MB. Records with the action_total_upload value set to 0 or null are not included in the results.","dataset = xdr_data
| filter action_total_upload != 0 and action_total_upload != null 
| bin action_total_upload bins = 50 
| limit 1000
",0.6410860051309192
92,"Returns a maximum of 100 microsoft_dhcp_raw records, which includes a TIMESTAMP object in the p_t_test field in the format MMM dd YYYY HH:mm:ss, such as Jun 25th 2021 18:31:25. This format is detailed in the format_string function, which includes merging both the date and time fields.","dataset = microsoft_dhcp_raw 
| alter p_t_test = parse_timestamp(""%m/%d/%y %H:%M:%S"", format_string(""%s %s"", date, time)) 
| fields p_t_test 
| limit 100
",0.6382531850776931
72,"When the dfe_labels array is not empty, use the Alter stage to assign the 0-based index value returned by the arrayindexof function to a field called x. The arrayindexof function reviews the dfe_labels array and looks for the array element set to network. Otherwise, a NULL value is assigned to the x field.","dataset = xdr_data 
| filter dfe_labels != null
| alter x = arrayindexof(dfe_labels , ""@element"" = ""network"") 
| fields x, dfe_labels 
| limit 100 ",0.6369540874191437
100,"For the last 5 days from when the query is run until now, returns a maximum of 100 xdr_data records with the events of the _time field with a new field called ""x"". The ""x"" field lists the final timestamp at the end of 5 days from when the query runs for the events in descending order. For more information on this relative time frame range, see the config timeframe function.","config timeframe = between ""5d"" and ""now""
| dataset = xdr_data
| alter x = time_frame_end()
| fields x
| sort desc",0.6368757307500601
39,Return the maximum value of the action_total_download field for all records that have matching values for their actor_process_image_path and actor_process_command_line values. The query returns a maximum of 100 xdr_data records and includes a raw_data column listing the raw data events used to display the final comp results.,"dataset = xdr_data
| fields actor_process_image_path as Process_Path, actor_process_command_line as Process_CMD, action_total_download as Download
| filter Download > 0
| limit 100
| comp max(Download) as max_download by Process_Path, Process_CMD addrawdata = true as raw_data",0.6363767419919764
40,Return the minimum value of the action_total_download field for all records that have matching values for their actor_process_image_path and actor_process_command_line values. The query returns a maximum of 100 xdr_data records and includes a raw_data column listing the raw data events used to display the final comp results.,"dataset = xdr_data
| fields actor_process_image_path as Process_Path, actor_process_command_line as Process_CMD, action_total_download as Download
| filter Download > 0
| limit 100
| comp min(Download) as min_download by Process_Path, Process_CMD addrawdata = true as raw_data",0.6343386966409729
42,Return an array containing all the values seen for the action_total_download field for all records that have matching values for their actor_process_image_path and actor_process_command_line values. The query returns a maximum of 100 xdr_data records and includes a raw_data column listing the raw data events used to display the final comp results.,"dataset = xdr_data
| fields actor_process_image_path as Process_Path, actor_process_command_line as Process_CMD, action_total_download Download
| filter Download > 0
| limit 100
| comp values(Download) as values_download by Process_Path, Process_CMD addrawdata = true as raw_data",0.6339449740452922
71,"Use the Alter stage to assign a value returned by the arrayindexof function to a field called x. The arrayindexof function reviews the dfe_labels array and returns 0 if the array is not empty and the backtrace_identities array contains more than 1 element. Otherwise, a NULL value is assigned to the x field.","dataset in (xdr_data) 
| alter x = arrayindexof(dfe_labels , array_length(backtrace_identities) > 1) 
| fields x, dfe_labels 
| limit 100 ",0.6330739212453962
38,Return an array containing up to 100 values seen for the action_total_download field for all records that have matching values for their actor_process_image_path and actor_process_command_line values. The query returns a maximum of 100 xdr_data records and includes a raw_data column listing the raw data events used to display the final comp results.,"dataset = xdr_data
| fields actor_process_image_path as Process_Path, actor_process_command_line as Process_CMD, action_total_download Download
| filter Download > 0
| limit 100
| comp list(Download) as list_download by Process_Path, Process_CMD addrawdata = true as raw_data",0.6312230418738818
99,"For the last 5 days from when the query is sent, returns a maximum of 100 xdr_data records with the events of the _time field with a new field called ""x"". The ""x"" field lists the final timestamp at the end of 5 days from when the query was sent for the events in descending order. For more information on this relative timeframe range, see the config timeframe function.","config timeframe = 5d
| dataset = xdr_data
| alter x = time_frame_end()
| fields x
| sort desc x",0.63069784725756
41,Return the sum of the action_total_download field for all records that have matching values for their actor_process_image_path and actor_process_command_line values. The query returns a maximum of 100 xdr_data records and includes a raw_data column listing the raw data events used to display the final comp results.,"dataset = xdr_data
| fields actor_process_image_path as Process_Path, actor_process_command_line as Process_CMD, action_total_download as Download
| filter Download > 0
| limit 100
| comp sum(Download) as total_download by Process_Path, Process_CMD addrawdata = true as raw_data",0.6301716327383433
32,Return the sum of the action_total_download field for all records that have matching values for their actor_process_image_path and actor_process_command_line values. The query returns a maximum of 100 xdr_data records and includes a raw_data column listing the raw data events used to display the final comp results.,"dataset = xdr_data
| fields actor_process_image_path as Process_Path, actor_process_command_line as Process_CMD, action_total_download as Download
| filter Download > 0
| limit 100
| comp avg(Download) as average_download by Process_Path, Process_CMD
addrawdata = true as raw_data",0.6301716327383433
81,"Returns a maximum of 100 xdr_data records, which includes a string field called new_time in the format YYYY/MM/dd HH:mm:ss, such as 2021/11/12 01:53:35. This format is detailed in the format_timestamp function, which defines the retrieving the new_time (%Y/%m/%d %H:%M:%S) from the _time field and adding +03:00 hours as the time zone format.","dataset = xdr_data  
| alter hour = format_timestamp(""%Y/%m/%d %H:%M:%S"", _time, ""+03:00"") 
| fields hour 
| limit 100
",0.6292808648004496
93,"Returns a maximum of 100 microsoft_dhcp_raw records, which includes a TIMESTAMP object in the p_t_test field in the format MMM dd YYYY HH:mm:ss, such as Jun 25th 2021 18:31:25. This format is detailed in the format_string function, which includes merging both the date and time fields, and includes a ""Asia/Singapore"" time zone.","dataset = microsoft_dhcp_raw 
| alter p_t_test = parse_timestamp(""%m/%d/%y %H:%M:%S"", format_string(""%s %s"", date, time), ""Asia/Singapore"") 
| fields p_t_test 
| limit 100
",0.6291372363430339
80,"Returns a maximum of 100 xdr_data records, which includes a string field called new_time in the format YYYY/MM/dd HH:mm:ss, such as 2021/11/12 12:10:30. This format is detailed in the format_timestamp function, which defines retrieving the new_time (%Y/%m/%d %H:%M:%S) from the _time field.","dataset = xdr_data
| alter new_time = format_timestamp(""%Y/%m/%d %H:%M:%S"", _time) 
| fields new_time 
| limit 100
",0.629033765631887
51,"Return unique groups of actor_primary_username and os_actor_primary_username field values. For each unique grouping, return the pair that first appears on a record with a non-NULL action_file_size field.","dataset = xdr_data 
| fields actor_primary_username as apu, 
         os_actor_primary_username as oapu, 
         action_file_size as afs 
| filter apu != null and afs != null 
| dedup apu, oapu by asc afs
",0.6279383680484982
94,"Returns a maximum of 100 microsoft_dhcp_raw records, which includes a TIMESTAMP object in the p_t_test field in the format MMM dd YYYY HH:mm:ss, such as Jun 25th 2021 18:31:25. This format is detailed in the format_string function, which includes merging both the date and time fields, and includes a time zone using an hours offset of â€œ+08:00â€.","dataset = microsoft_dhcp_raw 
| alter p_t_test = parse_timestamp(""%m/%d/%y %H:%M:%S"", format_string(""%s %s"", date, time), â€œ+08:00â€) 
| fields p_t_test 
| limit 100
",0.6270803547861994
47,"From April 1, 2021 at 9:00 a.m. UTC -02:00 until April 2, 2021 at 10:00 a.m. UTC -02:00, return a maximum of 100 xdr_data records.","config timeframe between ""2021-04-01 09:00:00 -0200"" and ""2021-04-02 10:00:00 -0200"" 
| dataset = xdr_data 
| limit 100",0.6265558899762438
26,Sum the action_total_download values for all records with matching pairs of values for the actor_process_image_path and actor_process_command_line fields. The query returns a maximum of 100 xdr_data records and includes a raw_data column listing the raw data events used to display the final comp results.,"dataset = xdr_data
| fields actor_process_image_path as Process_Path,
actor_process_command_line as Process_CMD,
action_total_download as Download
| filter Download > 0
| limit 100
| comp sum(Download) as total by Process_Path, Process_CMD addrawdata =
true as raw_data",0.6265422450108575
33,Return a count of all values seen for the actor_process_image_path field for all records that have matching values for their actor_process_image_path and actor_process_command_line values. The query returns a maximum of 100 xdr_data records and includes a raw_data column listing the raw data events used to display the final comp results.,"dataset = xdr_data
| fields actor_process_image_path as Process_Path, actor_process_command_line as Process_CMD, action_total_download as Download
| filter Download > 0
| limit 100
| comp count(Process_Path) as num_process_path by process_path, process_cmd addrawdata = true as raw_data
| sort desc process_path",0.6263500128951394
35,Return the first timestamp found in the dataset for any given action_total_download value for all records that have matching values for their actor_process_image_path and actor_process_command_line fields. The query returns a maximum of 100 xdr_data records and includes a raw_data column listing the raw data events used to display the final comp results.,"dataset = xdr_data
| fields _time,actor_process_image_path as Process_Path, actor_process_command_line as Process_CMD, action_total_download as Download
| filter Download > 0
| limit 100
| comp first(_time) as download_time by Process_Path, Process_CMD addrawdata = true as raw_data",0.6236603803406207
34,Return the chronologically earliest timestamp found for any given action_total_download value for all records that have matching values for their actor_process_image_path and actor_process_command_line fields. The query returns a maximum of 100 xdr_data records and includes a raw_data column listing the raw data events used to display the final comp results.,"dataset = xdr_data
| fields _time, actor_process_image_path as Process_Path, actor_process_command_line as Process_CMD, action_total_download as Download
| filter Download > 0
| limit 100
| comp earliest(_time) as download_time by Process_Path, Process_CMD addrawdata = true as raw_data",0.6223845619250434
78,Integer with left blank padding,"dataset = xdr_data 
| filter action_remote_ip_int != null
| alter int_with_left_blank = format_string(""|%100d|"", action_remote_ip_int)
| fields int_with_left_blank 
| limit 100
",0.6211137704378624
132,"Write XQL query to hunt for hunt on known IOCs hash (""2523f94bd4fba4af76f4411fe61084a7e7d80dec163c9ccba9226c80b8b31252"", ""d035d394a82ae1e44b25e273f99eae8e2369da828d6b6fdb95076fd3eb5de142"", ""94786066a64c0eb260a28a2959fcd31d63d175ade8b05ae682d3f6f9b2a5a916"", ""48b5fb3fa3ea67c2bc0086c41ec755c39d748a7100d71b81f618e82bf1c479f0"", ""ee44c0692fd2ab2f01d17ca4b58ca6c7f79388cbc681f885bb17ec946514088c"", ""ee42ddacbd202008bcc1312e548e1d9ac670dd3d86c999606a3a01d464a2a330"",""ee44c0692fd2ab2f01d17ca4b58ca6c7f79388cbc681f885bb17ec946514088c"", ""ee42ddacbd202008bcc1312e548e1d9ac670dd3d86c999606a3a01d464a2a330"" or destination domains in (.*theyardservice.com|.*worldhomeoutlet.com|refreshauthtoken-default-rtdb.firebaseio.com)","dataset = xdr_data|filter action_file_sha256 IN (""2523f94bd4fba4af76f4411fe61084a7e7d80dec163c9ccba9226c80b8b31252"", ""d035d394a82ae1e44b25e273f99eae8e2369da828d6b6fdb95076fd3eb5de142"", ""94786066a64c0eb260a28a2959fcd31d63d175ade8b05ae682d3f6f9b2a5a916"", ""48b5fb3fa3ea67c2bc0086c41ec755c39d748a7100d71b81f618e82bf1c479f0"", ""ee44c0692fd2ab2f01d17ca4b58ca6c7f79388cbc681f885bb17ec946514088c"", ""ee42ddacbd202008bcc1312e548e1d9ac670dd3d86c999606a3a01d464a2a330"") OR action_module_sha256 IN (""ee44c0692fd2ab2f01d17ca4b58ca6c7f79388cbc681f885bb17ec946514088c"", ""ee42ddacbd202008bcc1312e548e1d9ac670dd3d86c999606a3a01d464a2a330"") OR dst_action_external_hostname ~="".*theyardservice.com|.*worldhomeoutlet.com|refreshauthtoken-default-rtdb.firebaseio.com"" OR action_external_hostname ~="".*theyardservice.com|.*worldhomeoutlet.com|refreshauthtoken-default-rtdb.firebaseio.com"" OR dns_query_name ~="".*theyardservice.com|.*worldhomeoutlet.com"" | fields agent_hostname, causality_actor_process_image_path, actor_process_image_path,action_external_hostname, action_file_path, action_module_path, dst_action_external_hostname, dns_query_name,event_id, action_file_sha256, action_module_sha256",0.620347914618906
102,"Returns a maximum of 100 xdr_data records with the events of the _time field, which includes a timestamp field in the Unix epoch format called ts. The ts field contains the equivalent Unix epoch values in milliseconds for the timestamps listed in the _time field.","dataset = xdr_data
| filter _time != null
| alter ts = to_epoch(_time, ""MILLIS"")
| fields ts
| limit 100",0.6183451549847954
36,Return the last timestamp found in the dataset for any given action_total_download value for all records that have matching values for their actor_process_image_path and actor_process_command_line fields. The query returns a maximum of 100 xdr_data records and includes a raw_data column listing the raw data events used to display the final comp results.,"dataset = xdr_data
| fields _time, actor_process_image_path as Process_Path, actor_process_command_line as Process_CMD, action_total_download as Download
| filter Download > 0
| limit 100
| comp last(_time) as download_time by Process_Path, Process_CMD addrawdata = true as raw_data",0.6179616485976371
37,Return the chronologically latest timestamp found for any given action_total_download value for all records that have matching values for their actor_process_image_path and actor_process_command_line fields. The query returns a maximum of 100 xdr_data records and includes a raw_data column listing the raw data events used to display the final comp results.,"dataset = xdr_data
| fields _time, actor_process_image_path as Process_Path, actor_process_command_line as Process_CMD, action_total_download as Download
| filter Download > 0
| limit 100
| comp latest(_time) as download_time by Process_Path, Process_CMD addrawdata = true as raw_data",0.6171064001223605
79,Integer with left zero padding,"dataset = xdr_data 
| filter action_remote_ip_int != null
| alter int_with_left_zero_padding = format_string(""+%0100d+"", action_remote_ip_int)
| fields int_with_left_zero_padding 
| limit 100
",0.6109317165869788
90,"Returns a maximum of 100 xdr_data records, which includes a timestamp field called new_time in the format MMM dd YYYY HH:mm:ss, such as Dec 25th 2008 04:30:00. This new_time field is comprised by taking a character string representation of a timestamp ""Thu Dec 25 07:30:00 2008"" and adding to it +03:00 hours as the time zone format. This string timestamp is then converted to a Unix epoch TIMESTAMP object in milliseconds using the parse_epoch function, and this resulting value is converted to the final timestamp using the to_timestamp function.","dataset = xdr_data
| alter new_time = to_timestamp(parse_epoch(""%c"", ""Thu Dec 25 07:30:00 2008"", ""+3"", ""millis""))
| fields new_time
| limit 100",0.6090250006183593
91,"Returns a maximum of 100 xdr_data records, which includes a timestamp field called new_time in the format MMM dd YYYY HH:mm:ss, such as Dec 25th 2008 04:30:00. This new_time field is comprised by taking a character string representation of a timestamp ""Thu Dec 25 07:30:00 2008"" and adding to it a UTC time zone format (default when none configured). This string timestamp is then converted to a Unix epoch TIMESTAMP object in seconds (default when none configured) using the parse_epoch function, and this resulting value is converted to the final timestamp using the to_timestamp function.","dataset = xdr_data
| alter new_time = to_timestamp(parse_epoch(""%c"", ""Thu Dec 25 07:30:00 2008""))
| fields new_time
| limit 100",0.6089808082702876
